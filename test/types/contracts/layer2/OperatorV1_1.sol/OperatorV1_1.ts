/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface OperatorV1_1Interface extends utils.Interface {
  functions: {
    "acquireManager()": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "checkL1Bridge()": FunctionFragment;
    "claimByLayer2Candidate(uint256)": FunctionFragment;
    "claimERC20(address,uint256)": FunctionFragment;
    "claimETH()": FunctionFragment;
    "deleteOperator(address)": FunctionFragment;
    "depositByLayer2Canddiate(uint256)": FunctionFragment;
    "depositManager()": FunctionFragment;
    "explorer()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "layer2Manager()": FunctionFragment;
    "manager()": FunctionFragment;
    "operator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(address,address,address,address)": FunctionFragment;
    "setExplorer(string)": FunctionFragment;
    "systemConfig()": FunctionFragment;
    "ton()": FunctionFragment;
    "transferManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acquireManager"
      | "addOperator"
      | "checkL1Bridge"
      | "claimByLayer2Candidate"
      | "claimERC20"
      | "claimETH"
      | "deleteOperator"
      | "depositByLayer2Canddiate"
      | "depositManager"
      | "explorer"
      | "isOperator"
      | "layer2Manager"
      | "manager"
      | "operator"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "setExplorer"
      | "systemConfig"
      | "ton"
      | "transferManager"
      | "transferOwnership"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acquireManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkL1Bridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimByLayer2Candidate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "claimETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositByLayer2Canddiate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "explorer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Manager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExplorer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acquireManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkL1Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimByLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositByLayer2Canddiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "explorer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExplorer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "AddedOperator(address)": EventFragment;
    "Claimed(address,address,address,uint256)": EventFragment;
    "DeletedOperator(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAddresses(address,address,address,address)": EventFragment;
    "SetExplorer(string)": EventFragment;
    "TransferredManager(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeletedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAddresses"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExplorer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredManager"): EventFragment;
}

export interface AddedOperatorEventObject {
  operator: string;
}
export type AddedOperatorEvent = TypedEvent<[string], AddedOperatorEventObject>;

export type AddedOperatorEventFilter = TypedEventFilter<AddedOperatorEvent>;

export interface ClaimedEventObject {
  token: string;
  caller: string;
  to: string;
  amount: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface DeletedOperatorEventObject {
  operator: string;
}
export type DeletedOperatorEvent = TypedEvent<
  [string],
  DeletedOperatorEventObject
>;

export type DeletedOperatorEventFilter = TypedEventFilter<DeletedOperatorEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAddressesEventObject {
  _layer2Manager: string;
  _depositManager: string;
  _ton: string;
  _wton: string;
}
export type SetAddressesEvent = TypedEvent<
  [string, string, string, string],
  SetAddressesEventObject
>;

export type SetAddressesEventFilter = TypedEventFilter<SetAddressesEvent>;

export interface SetExplorerEventObject {
  _explorer: string;
}
export type SetExplorerEvent = TypedEvent<[string], SetExplorerEventObject>;

export type SetExplorerEventFilter = TypedEventFilter<SetExplorerEvent>;

export interface TransferredManagerEventObject {
  previousManager: string;
  newManager: string;
}
export type TransferredManagerEvent = TypedEvent<
  [string, string],
  TransferredManagerEventObject
>;

export type TransferredManagerEventFilter =
  TypedEventFilter<TransferredManagerEvent>;

export interface OperatorV1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorV1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acquireManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkL1Bridge(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        result: boolean;
        l1Bridge: string;
        portal: string;
        l2Ton: string;
      }
    >;

    claimByLayer2Candidate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositByLayer2Canddiate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    explorer(overrides?: CallOverrides): Promise<[string]>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    layer2Manager(overrides?: CallOverrides): Promise<[string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    operator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _layer2Manager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExplorer(
      _explorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    systemConfig(overrides?: CallOverrides): Promise<[string]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    transferManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  acquireManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOperator(
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkL1Bridge(
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, string] & {
      result: boolean;
      l1Bridge: string;
      portal: string;
      l2Ton: string;
    }
  >;

  claimByLayer2Candidate(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteOperator(
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositByLayer2Canddiate(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  explorer(overrides?: CallOverrides): Promise<string>;

  isOperator(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  layer2Manager(overrides?: CallOverrides): Promise<string>;

  manager(overrides?: CallOverrides): Promise<string>;

  operator(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _layer2Manager: PromiseOrValue<string>,
    _depositManager: PromiseOrValue<string>,
    _ton: PromiseOrValue<string>,
    _wton: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExplorer(
    _explorer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  systemConfig(overrides?: CallOverrides): Promise<string>;

  ton(overrides?: CallOverrides): Promise<string>;

  transferManager(
    newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acquireManager(overrides?: CallOverrides): Promise<void>;

    addOperator(
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkL1Bridge(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        result: boolean;
        l1Bridge: string;
        portal: string;
        l2Ton: string;
      }
    >;

    claimByLayer2Candidate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimETH(overrides?: CallOverrides): Promise<void>;

    deleteOperator(
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositByLayer2Canddiate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    explorer(overrides?: CallOverrides): Promise<string>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    layer2Manager(overrides?: CallOverrides): Promise<string>;

    manager(overrides?: CallOverrides): Promise<string>;

    operator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _layer2Manager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExplorer(
      _explorer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    systemConfig(overrides?: CallOverrides): Promise<string>;

    ton(overrides?: CallOverrides): Promise<string>;

    transferManager(
      newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedOperator(address)"(operator?: null): AddedOperatorEventFilter;
    AddedOperator(operator?: null): AddedOperatorEventFilter;

    "Claimed(address,address,address,uint256)"(
      token?: null,
      caller?: null,
      to?: null,
      amount?: null
    ): ClaimedEventFilter;
    Claimed(
      token?: null,
      caller?: null,
      to?: null,
      amount?: null
    ): ClaimedEventFilter;

    "DeletedOperator(address)"(operator?: null): DeletedOperatorEventFilter;
    DeletedOperator(operator?: null): DeletedOperatorEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetAddresses(address,address,address,address)"(
      _layer2Manager?: null,
      _depositManager?: null,
      _ton?: null,
      _wton?: null
    ): SetAddressesEventFilter;
    SetAddresses(
      _layer2Manager?: null,
      _depositManager?: null,
      _ton?: null,
      _wton?: null
    ): SetAddressesEventFilter;

    "SetExplorer(string)"(_explorer?: null): SetExplorerEventFilter;
    SetExplorer(_explorer?: null): SetExplorerEventFilter;

    "TransferredManager(address,address)"(
      previousManager?: null,
      newManager?: null
    ): TransferredManagerEventFilter;
    TransferredManager(
      previousManager?: null,
      newManager?: null
    ): TransferredManagerEventFilter;
  };

  estimateGas: {
    acquireManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkL1Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    claimByLayer2Candidate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositByLayer2Canddiate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    explorer(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layer2Manager(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    operator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _layer2Manager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExplorer(
      _explorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    systemConfig(overrides?: CallOverrides): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    transferManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acquireManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkL1Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimByLayer2Candidate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteOperator(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositByLayer2Canddiate(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    explorer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2Manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _layer2Manager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExplorer(
      _explorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    systemConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
