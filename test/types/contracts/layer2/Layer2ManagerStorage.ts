/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface Layer2ManagerStorageInterface extends utils.Interface {
  functions: {
    "dao()": FunctionFragment;
    "depositManager()": FunctionFragment;
    "l2Register()": FunctionFragment;
    "minimumInitialDepositAmount()": FunctionFragment;
    "operatorFactory()": FunctionFragment;
    "operatorInfo(address)": FunctionFragment;
    "seigManager()": FunctionFragment;
    "swapProxy()": FunctionFragment;
    "systemConfigInfo(address)": FunctionFragment;
    "ton()": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dao"
      | "depositManager"
      | "l2Register"
      | "minimumInitialDepositAmount"
      | "operatorFactory"
      | "operatorInfo"
      | "seigManager"
      | "swapProxy"
      | "systemConfigInfo"
      | "ton"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2Register",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumInitialDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemConfigInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumInitialDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {};
}

export interface Layer2ManagerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Layer2ManagerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dao(overrides?: CallOverrides): Promise<[string]>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    l2Register(overrides?: CallOverrides): Promise<[string]>;

    minimumInitialDepositAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operatorFactory(overrides?: CallOverrides): Promise<[string]>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { systemConfig: string; layer2Candidate: string }
    >;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    swapProxy(overrides?: CallOverrides): Promise<[string]>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { stateIssue: number; operator: string }>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  dao(overrides?: CallOverrides): Promise<string>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  l2Register(overrides?: CallOverrides): Promise<string>;

  minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  operatorFactory(overrides?: CallOverrides): Promise<string>;

  operatorInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { systemConfig: string; layer2Candidate: string }
  >;

  seigManager(overrides?: CallOverrides): Promise<string>;

  swapProxy(overrides?: CallOverrides): Promise<string>;

  systemConfigInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, string] & { stateIssue: number; operator: string }>;

  ton(overrides?: CallOverrides): Promise<string>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dao(overrides?: CallOverrides): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    l2Register(overrides?: CallOverrides): Promise<string>;

    minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorFactory(overrides?: CallOverrides): Promise<string>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { systemConfig: string; layer2Candidate: string }
    >;

    seigManager(overrides?: CallOverrides): Promise<string>;

    swapProxy(overrides?: CallOverrides): Promise<string>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { stateIssue: number; operator: string }>;

    ton(overrides?: CallOverrides): Promise<string>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    dao(overrides?: CallOverrides): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    l2Register(overrides?: CallOverrides): Promise<BigNumber>;

    minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorFactory(overrides?: CallOverrides): Promise<BigNumber>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    swapProxy(overrides?: CallOverrides): Promise<BigNumber>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Register(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumInitialDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
