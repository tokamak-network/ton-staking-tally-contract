/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace LegacySystemConfig {
  export type AddressesStruct = {
    l1CrossDomainMessenger: PromiseOrValue<string>;
    l1ERC721Bridge: PromiseOrValue<string>;
    l1StandardBridge: PromiseOrValue<string>;
    l2OutputOracle: PromiseOrValue<string>;
    optimismPortal: PromiseOrValue<string>;
    optimismMintableERC20Factory: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l1CrossDomainMessenger: string;
    l1ERC721Bridge: string;
    l1StandardBridge: string;
    l2OutputOracle: string;
    optimismPortal: string;
    optimismMintableERC20Factory: string;
  };
}

export interface LegacySystemConfigInterface extends utils.Interface {
  functions: {
    "addresses()": FunctionFragment;
    "l1CrossDomainMessenger()": FunctionFragment;
    "l1ERC721Bridge()": FunctionFragment;
    "l1StandardBridge()": FunctionFragment;
    "l2OutputOracle()": FunctionFragment;
    "l2Registry()": FunctionFragment;
    "l2Ton()": FunctionFragment;
    "name()": FunctionFragment;
    "optimismMintableERC20Factory()": FunctionFragment;
    "optimismPortal()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(string,(address,address,address,address,address,address),address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addresses"
      | "l1CrossDomainMessenger"
      | "l1ERC721Bridge"
      | "l1StandardBridge"
      | "l2OutputOracle"
      | "l2Registry"
      | "l2Ton"
      | "name"
      | "optimismMintableERC20Factory"
      | "optimismPortal"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addresses", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ERC721Bridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1StandardBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2Registry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2Ton", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optimismMintableERC20Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismPortal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      LegacySystemConfig.AddressesStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ERC721Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1StandardBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Ton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimismMintableERC20Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LegacySystemConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LegacySystemConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        l1CrossDomainMessenger: string;
        l1ERC721Bridge: string;
        l1StandardBridge: string;
        l2OutputOracle: string;
        optimismPortal: string;
        optimismMintableERC20Factory: string;
      }
    >;

    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l1ERC721Bridge(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l1StandardBridge(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l2OutputOracle(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l2Registry(overrides?: CallOverrides): Promise<[string]>;

    l2Ton(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    optimismMintableERC20Factory(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    optimismPortal(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _name: PromiseOrValue<string>,
      _addresses: LegacySystemConfig.AddressesStruct,
      _l2Ton: PromiseOrValue<string>,
      _l2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addresses(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      l1CrossDomainMessenger: string;
      l1ERC721Bridge: string;
      l1StandardBridge: string;
      l2OutputOracle: string;
      optimismPortal: string;
      optimismMintableERC20Factory: string;
    }
  >;

  l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  l1ERC721Bridge(overrides?: CallOverrides): Promise<string>;

  l1StandardBridge(overrides?: CallOverrides): Promise<string>;

  l2OutputOracle(overrides?: CallOverrides): Promise<string>;

  l2Registry(overrides?: CallOverrides): Promise<string>;

  l2Ton(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  optimismMintableERC20Factory(overrides?: CallOverrides): Promise<string>;

  optimismPortal(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _name: PromiseOrValue<string>,
    _addresses: LegacySystemConfig.AddressesStruct,
    _l2Ton: PromiseOrValue<string>,
    _l2Registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        l1CrossDomainMessenger: string;
        l1ERC721Bridge: string;
        l1StandardBridge: string;
        l2OutputOracle: string;
        optimismPortal: string;
        optimismMintableERC20Factory: string;
      }
    >;

    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    l1ERC721Bridge(overrides?: CallOverrides): Promise<string>;

    l1StandardBridge(overrides?: CallOverrides): Promise<string>;

    l2OutputOracle(overrides?: CallOverrides): Promise<string>;

    l2Registry(overrides?: CallOverrides): Promise<string>;

    l2Ton(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    optimismMintableERC20Factory(overrides?: CallOverrides): Promise<string>;

    optimismPortal(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _name: PromiseOrValue<string>,
      _addresses: LegacySystemConfig.AddressesStruct,
      _l2Ton: PromiseOrValue<string>,
      _l2Registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addresses(overrides?: CallOverrides): Promise<BigNumber>;

    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    l1ERC721Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    l1StandardBridge(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracle(overrides?: CallOverrides): Promise<BigNumber>;

    l2Registry(overrides?: CallOverrides): Promise<BigNumber>;

    l2Ton(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    optimismMintableERC20Factory(overrides?: CallOverrides): Promise<BigNumber>;

    optimismPortal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _name: PromiseOrValue<string>,
      _addresses: LegacySystemConfig.AddressesStruct,
      _l2Ton: PromiseOrValue<string>,
      _l2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ERC721Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1StandardBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2OutputOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimismMintableERC20Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimismPortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _name: PromiseOrValue<string>,
      _addresses: LegacySystemConfig.AddressesStruct,
      _l2Ton: PromiseOrValue<string>,
      _l2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
