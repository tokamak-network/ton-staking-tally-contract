/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface OperatorFactoryInterface extends utils.Interface {
  functions: {
    "changeOperatorImplementaion(address)": FunctionFragment;
    "createOperator(address)": FunctionFragment;
    "depositManager()": FunctionFragment;
    "getAddress(address)": FunctionFragment;
    "layer2Manager()": FunctionFragment;
    "operatorImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(address,address,address,address)": FunctionFragment;
    "ton()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeOperatorImplementaion"
      | "createOperator"
      | "depositManager"
      | "getAddress"
      | "layer2Manager"
      | "operatorImplementation"
      | "owner"
      | "renounceOwnership"
      | "setAddresses"
      | "ton"
      | "transferOwnership"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeOperatorImplementaion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Manager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "changeOperatorImplementaion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "ChangedOperatorImplementaion(address)": EventFragment;
    "CreatedOperator(address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAddresses(address,address,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangedOperatorImplementaion"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAddresses"): EventFragment;
}

export interface ChangedOperatorImplementaionEventObject {
  newOperatorImplementation: string;
}
export type ChangedOperatorImplementaionEvent = TypedEvent<
  [string],
  ChangedOperatorImplementaionEventObject
>;

export type ChangedOperatorImplementaionEventFilter =
  TypedEventFilter<ChangedOperatorImplementaionEvent>;

export interface CreatedOperatorEventObject {
  systemConfig: string;
  owner: string;
  manager: string;
  operator: string;
}
export type CreatedOperatorEvent = TypedEvent<
  [string, string, string, string],
  CreatedOperatorEventObject
>;

export type CreatedOperatorEventFilter = TypedEventFilter<CreatedOperatorEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAddressesEventObject {
  depositManager: string;
  ton: string;
  wton: string;
  layer2Manager: string;
}
export type SetAddressesEvent = TypedEvent<
  [string, string, string, string],
  SetAddressesEventObject
>;

export type SetAddressesEventFilter = TypedEventFilter<SetAddressesEvent>;

export interface OperatorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeOperatorImplementaion(
      newOperatorImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOperator(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    getAddress(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    layer2Manager(overrides?: CallOverrides): Promise<[string]>;

    operatorImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  changeOperatorImplementaion(
    newOperatorImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOperator(
    systemConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  getAddress(
    systemConfig: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  layer2Manager(overrides?: CallOverrides): Promise<string>;

  operatorImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _depositManager: PromiseOrValue<string>,
    _ton: PromiseOrValue<string>,
    _wton: PromiseOrValue<string>,
    _layer2Manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ton(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeOperatorImplementaion(
      newOperatorImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOperator(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    getAddress(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    layer2Manager(overrides?: CallOverrides): Promise<string>;

    operatorImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _layer2Manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ton(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChangedOperatorImplementaion(address)"(
      newOperatorImplementation?: null
    ): ChangedOperatorImplementaionEventFilter;
    ChangedOperatorImplementaion(
      newOperatorImplementation?: null
    ): ChangedOperatorImplementaionEventFilter;

    "CreatedOperator(address,address,address,address)"(
      systemConfig?: null,
      owner?: null,
      manager?: null,
      operator?: null
    ): CreatedOperatorEventFilter;
    CreatedOperator(
      systemConfig?: null,
      owner?: null,
      manager?: null,
      operator?: null
    ): CreatedOperatorEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetAddresses(address,address,address,address)"(
      depositManager?: null,
      ton?: null,
      wton?: null,
      layer2Manager?: null
    ): SetAddressesEventFilter;
    SetAddresses(
      depositManager?: null,
      ton?: null,
      wton?: null,
      layer2Manager?: null
    ): SetAddressesEventFilter;
  };

  estimateGas: {
    changeOperatorImplementaion(
      newOperatorImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOperator(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layer2Manager(overrides?: CallOverrides): Promise<BigNumber>;

    operatorImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeOperatorImplementaion(
      newOperatorImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOperator(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddress(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2Manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _depositManager: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
