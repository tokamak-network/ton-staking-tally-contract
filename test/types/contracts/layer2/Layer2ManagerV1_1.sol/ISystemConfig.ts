/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ISystemConfigInterface extends utils.Interface {
  functions: {
    "l1CrossDomainMessenger()": FunctionFragment;
    "l1StandardBridge()": FunctionFragment;
    "l2OutputOracle()": FunctionFragment;
    "l2Ton()": FunctionFragment;
    "optimismPortal()": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "l1CrossDomainMessenger"
      | "l1StandardBridge"
      | "l2OutputOracle"
      | "l2Ton"
      | "optimismPortal"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "l1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1StandardBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2Ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optimismPortal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1StandardBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {};
}

export interface ISystemConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISystemConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l1StandardBridge(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l2OutputOracle(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    l2Ton(overrides?: CallOverrides): Promise<[string] & { addr_: string }>;

    optimismPortal(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  l1StandardBridge(overrides?: CallOverrides): Promise<string>;

  l2OutputOracle(overrides?: CallOverrides): Promise<string>;

  l2Ton(overrides?: CallOverrides): Promise<string>;

  optimismPortal(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    l1StandardBridge(overrides?: CallOverrides): Promise<string>;

    l2OutputOracle(overrides?: CallOverrides): Promise<string>;

    l2Ton(overrides?: CallOverrides): Promise<string>;

    optimismPortal(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    l1StandardBridge(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracle(overrides?: CallOverrides): Promise<BigNumber>;

    l2Ton(overrides?: CallOverrides): Promise<BigNumber>;

    optimismPortal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1StandardBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2OutputOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimismPortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
