/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface Layer2ManagerV1_1Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "aliveImplementation(address)": FunctionFragment;
    "checkL1Bridge(address)": FunctionFragment;
    "checkLayer2TVL(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "depositManager()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "issueStatusLayer2(address)": FunctionFragment;
    "l2Register()": FunctionFragment;
    "layer2CandidateOfOperator(address)": FunctionFragment;
    "minimumInitialDepositAmount()": FunctionFragment;
    "onApprove(address,address,uint256,bytes)": FunctionFragment;
    "operatorFactory()": FunctionFragment;
    "operatorInfo(address)": FunctionFragment;
    "operatorOfSystemConfig(address)": FunctionFragment;
    "pauseLayer2Candidate(address)": FunctionFragment;
    "pauseProxy()": FunctionFragment;
    "proxyImplementation(uint256)": FunctionFragment;
    "registerLayer2Candidate(address,uint256,bool,string)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "seigManager()": FunctionFragment;
    "selectorImplementation(bytes4)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address,address)": FunctionFragment;
    "setMinimumInitialDepositAmount(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapProxy()": FunctionFragment;
    "systemConfigInfo(address)": FunctionFragment;
    "systemConfigOfOperator(address)": FunctionFragment;
    "ton()": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseLayer2Cnadidate(address)": FunctionFragment;
    "updateSeigniorage(address,uint256)": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "addAdmin"
      | "aliveImplementation"
      | "checkL1Bridge"
      | "checkLayer2TVL"
      | "dao"
      | "depositManager"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isAdmin"
      | "isOwner"
      | "issueStatusLayer2"
      | "l2Register"
      | "layer2CandidateOfOperator"
      | "minimumInitialDepositAmount"
      | "onApprove"
      | "operatorFactory"
      | "operatorInfo"
      | "operatorOfSystemConfig"
      | "pauseLayer2Candidate"
      | "pauseProxy"
      | "proxyImplementation"
      | "registerLayer2Candidate"
      | "removeAdmin"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "seigManager"
      | "selectorImplementation"
      | "setAddresses"
      | "setMinimumInitialDepositAmount"
      | "supportsInterface"
      | "swapProxy"
      | "systemConfigInfo"
      | "systemConfigOfOperator"
      | "ton"
      | "transferAdmin"
      | "transferOwnership"
      | "unpauseLayer2Cnadidate"
      | "updateSeigniorage"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aliveImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkL1Bridge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLayer2TVL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issueStatusLayer2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2Register",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layer2CandidateOfOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumInitialDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorOfSystemConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseLayer2Candidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyImplementation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLayer2Candidate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorImplementation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumInitialDepositAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "swapProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemConfigInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfigOfOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseLayer2Cnadidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aliveImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkL1Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLayer2TVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueStatusLayer2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2CandidateOfOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumInitialDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onApprove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorOfSystemConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumInitialDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigOfOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseLayer2Cnadidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "PausedLayer2Candidate(address,address)": EventFragment;
    "RegisteredLayer2Candidate(address,uint256,string,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetAddresses(address,address,address,address,address,address,address,address)": EventFragment;
    "SetMinimumInitialDepositAmount(uint256)": EventFragment;
    "UnpausedLayer2Candidate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PausedLayer2Candidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredLayer2Candidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAddresses"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMinimumInitialDepositAmount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedLayer2Candidate"): EventFragment;
}

export interface PausedLayer2CandidateEventObject {
  systemConfig: string;
  _layer2: string;
}
export type PausedLayer2CandidateEvent = TypedEvent<
  [string, string],
  PausedLayer2CandidateEventObject
>;

export type PausedLayer2CandidateEventFilter =
  TypedEventFilter<PausedLayer2CandidateEvent>;

export interface RegisteredLayer2CandidateEventObject {
  systemConfig: string;
  wtonAmount: BigNumber;
  memo: string;
  operator: string;
  layer2Candidate: string;
}
export type RegisteredLayer2CandidateEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  RegisteredLayer2CandidateEventObject
>;

export type RegisteredLayer2CandidateEventFilter =
  TypedEventFilter<RegisteredLayer2CandidateEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetAddressesEventObject {
  _l2Register: string;
  _operatorFactory: string;
  _ton: string;
  _wton: string;
  _dao: string;
  _depositManager: string;
  _seigManager: string;
  _swapProxy: string;
}
export type SetAddressesEvent = TypedEvent<
  [string, string, string, string, string, string, string, string],
  SetAddressesEventObject
>;

export type SetAddressesEventFilter = TypedEventFilter<SetAddressesEvent>;

export interface SetMinimumInitialDepositAmountEventObject {
  _minimumInitialDepositAmount: BigNumber;
}
export type SetMinimumInitialDepositAmountEvent = TypedEvent<
  [BigNumber],
  SetMinimumInitialDepositAmountEventObject
>;

export type SetMinimumInitialDepositAmountEventFilter =
  TypedEventFilter<SetMinimumInitialDepositAmountEvent>;

export interface UnpausedLayer2CandidateEventObject {
  systemConfig: string;
  _layer2: string;
}
export type UnpausedLayer2CandidateEvent = TypedEvent<
  [string, string],
  UnpausedLayer2CandidateEventObject
>;

export type UnpausedLayer2CandidateEventFilter =
  TypedEventFilter<UnpausedLayer2CandidateEvent>;

export interface Layer2ManagerV1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Layer2ManagerV1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkL1Bridge(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        result: boolean;
        l1Bridge: string;
        portal: string;
        l2Ton: string;
      }
    >;

    checkLayer2TVL(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { result: boolean; amount: BigNumber }>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    issueStatusLayer2(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    l2Register(overrides?: CallOverrides): Promise<[string]>;

    layer2CandidateOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minimumInitialDepositAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorFactory(overrides?: CallOverrides): Promise<[string]>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { systemConfig: string; layer2Candidate: string }
    >;

    operatorOfSystemConfig(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauseLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<[boolean]>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      flagTon: PromiseOrValue<boolean>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setAddresses(
      _l2Register: PromiseOrValue<string>,
      _operatorFactory: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _seigManager: PromiseOrValue<string>,
      _swapProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumInitialDepositAmount(
      _minimumInitialDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapProxy(overrides?: CallOverrides): Promise<[string]>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { stateIssue: number; operator: string }>;

    systemConfigOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseLayer2Cnadidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSeigniorage(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aliveImplementation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkL1Bridge(
    _systemConfig: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, string] & {
      result: boolean;
      l1Bridge: string;
      portal: string;
      l2Ton: string;
    }
  >;

  checkLayer2TVL(
    _systemConfig: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { result: boolean; amount: BigNumber }>;

  dao(overrides?: CallOverrides): Promise<string>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  issueStatusLayer2(
    _sys: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  l2Register(overrides?: CallOverrides): Promise<string>;

  layer2CandidateOfOperator(
    _oper: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  onApprove(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorFactory(overrides?: CallOverrides): Promise<string>;

  operatorInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { systemConfig: string; layer2Candidate: string }
  >;

  operatorOfSystemConfig(
    _sys: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseLayer2Candidate(
    systemConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseProxy(overrides?: CallOverrides): Promise<boolean>;

  proxyImplementation(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerLayer2Candidate(
    systemConfig: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    flagTon: PromiseOrValue<boolean>,
    memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigManager(overrides?: CallOverrides): Promise<string>;

  selectorImplementation(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setAddresses(
    _l2Register: PromiseOrValue<string>,
    _operatorFactory: PromiseOrValue<string>,
    _ton: PromiseOrValue<string>,
    _wton: PromiseOrValue<string>,
    _dao: PromiseOrValue<string>,
    _depositManager: PromiseOrValue<string>,
    _seigManager: PromiseOrValue<string>,
    _swapProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumInitialDepositAmount(
    _minimumInitialDepositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapProxy(overrides?: CallOverrides): Promise<string>;

  systemConfigInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, string] & { stateIssue: number; operator: string }>;

  systemConfigOfOperator(
    _oper: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ton(overrides?: CallOverrides): Promise<string>;

  transferAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseLayer2Cnadidate(
    systemConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSeigniorage(
    systemConfig: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkL1Bridge(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string] & {
        result: boolean;
        l1Bridge: string;
        portal: string;
        l2Ton: string;
      }
    >;

    checkLayer2TVL(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { result: boolean; amount: BigNumber }>;

    dao(overrides?: CallOverrides): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    issueStatusLayer2(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    l2Register(overrides?: CallOverrides): Promise<string>;

    layer2CandidateOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operatorFactory(overrides?: CallOverrides): Promise<string>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { systemConfig: string; layer2Candidate: string }
    >;

    operatorOfSystemConfig(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseProxy(overrides?: CallOverrides): Promise<boolean>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      flagTon: PromiseOrValue<boolean>,
      memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAddresses(
      _l2Register: PromiseOrValue<string>,
      _operatorFactory: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _seigManager: PromiseOrValue<string>,
      _swapProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumInitialDepositAmount(
      _minimumInitialDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapProxy(overrides?: CallOverrides): Promise<string>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, string] & { stateIssue: number; operator: string }>;

    systemConfigOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ton(overrides?: CallOverrides): Promise<string>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseLayer2Cnadidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSeigniorage(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PausedLayer2Candidate(address,address)"(
      systemConfig?: null,
      _layer2?: null
    ): PausedLayer2CandidateEventFilter;
    PausedLayer2Candidate(
      systemConfig?: null,
      _layer2?: null
    ): PausedLayer2CandidateEventFilter;

    "RegisteredLayer2Candidate(address,uint256,string,address,address)"(
      systemConfig?: null,
      wtonAmount?: null,
      memo?: null,
      operator?: null,
      layer2Candidate?: null
    ): RegisteredLayer2CandidateEventFilter;
    RegisteredLayer2Candidate(
      systemConfig?: null,
      wtonAmount?: null,
      memo?: null,
      operator?: null,
      layer2Candidate?: null
    ): RegisteredLayer2CandidateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetAddresses(address,address,address,address,address,address,address,address)"(
      _l2Register?: null,
      _operatorFactory?: null,
      _ton?: null,
      _wton?: null,
      _dao?: null,
      _depositManager?: null,
      _seigManager?: null,
      _swapProxy?: null
    ): SetAddressesEventFilter;
    SetAddresses(
      _l2Register?: null,
      _operatorFactory?: null,
      _ton?: null,
      _wton?: null,
      _dao?: null,
      _depositManager?: null,
      _seigManager?: null,
      _swapProxy?: null
    ): SetAddressesEventFilter;

    "SetMinimumInitialDepositAmount(uint256)"(
      _minimumInitialDepositAmount?: null
    ): SetMinimumInitialDepositAmountEventFilter;
    SetMinimumInitialDepositAmount(
      _minimumInitialDepositAmount?: null
    ): SetMinimumInitialDepositAmountEventFilter;

    "UnpausedLayer2Candidate(address,address)"(
      systemConfig?: null,
      _layer2?: null
    ): UnpausedLayer2CandidateEventFilter;
    UnpausedLayer2Candidate(
      systemConfig?: null,
      _layer2?: null
    ): UnpausedLayer2CandidateEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkL1Bridge(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLayer2TVL(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    issueStatusLayer2(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2Register(overrides?: CallOverrides): Promise<BigNumber>;

    layer2CandidateOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumInitialDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorFactory(overrides?: CallOverrides): Promise<BigNumber>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorOfSystemConfig(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseProxy(overrides?: CallOverrides): Promise<BigNumber>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      flagTon: PromiseOrValue<boolean>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddresses(
      _l2Register: PromiseOrValue<string>,
      _operatorFactory: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _seigManager: PromiseOrValue<string>,
      _swapProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumInitialDepositAmount(
      _minimumInitialDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapProxy(overrides?: CallOverrides): Promise<BigNumber>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemConfigOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseLayer2Cnadidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSeigniorage(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkL1Bridge(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLayer2TVL(
      _systemConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueStatusLayer2(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2Register(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    layer2CandidateOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumInitialDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorOfSystemConfig(
      _sys: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerLayer2Candidate(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      flagTon: PromiseOrValue<boolean>,
      memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _l2Register: PromiseOrValue<string>,
      _operatorFactory: PromiseOrValue<string>,
      _ton: PromiseOrValue<string>,
      _wton: PromiseOrValue<string>,
      _dao: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _seigManager: PromiseOrValue<string>,
      _swapProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumInitialDepositAmount(
      _minimumInitialDepositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemConfigInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemConfigOfOperator(
      _oper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseLayer2Cnadidate(
      systemConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSeigniorage(
      systemConfig: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
