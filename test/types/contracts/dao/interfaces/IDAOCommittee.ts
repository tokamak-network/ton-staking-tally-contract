/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IStorageStateCommittee {
  export type CandidateInfoStruct = {
    candidateContract: PromiseOrValue<string>;
    indexMembers: PromiseOrValue<BigNumberish>;
    memberJoinedTime: PromiseOrValue<BigNumberish>;
    rewardPeriod: PromiseOrValue<BigNumberish>;
    claimedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CandidateInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    candidateContract: string;
    indexMembers: BigNumber;
    memberJoinedTime: BigNumber;
    rewardPeriod: BigNumber;
    claimedTimestamp: BigNumber;
  };
}

export interface IDAOCommitteeInterface extends utils.Interface {
  functions: {
    "activityRewardPerSecond()": FunctionFragment;
    "agendaManager()": FunctionFragment;
    "balanceOfOnCandidate(address,address)": FunctionFragment;
    "balanceOfOnCandidateContract(address,address)": FunctionFragment;
    "candidateContract(address)": FunctionFragment;
    "candidateFactory()": FunctionFragment;
    "candidateInfos(address)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "candidatesLength()": FunctionFragment;
    "castVote(uint256,uint256,string)": FunctionFragment;
    "changeMember(uint256)": FunctionFragment;
    "claimActivityReward(address)": FunctionFragment;
    "createCandidate(string)": FunctionFragment;
    "daoVault()": FunctionFragment;
    "decreaseMaxMember(uint256,uint256)": FunctionFragment;
    "endAgendaVoting(uint256)": FunctionFragment;
    "executeAgenda(uint256)": FunctionFragment;
    "getClaimableActivityReward(address)": FunctionFragment;
    "increaseMaxMember(uint256,uint256)": FunctionFragment;
    "isCandidate(address)": FunctionFragment;
    "isExistCandidate(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "layer2Registry()": FunctionFragment;
    "maxMember()": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "onApprove(address,address,uint256,bytes)": FunctionFragment;
    "quorum()": FunctionFragment;
    "registerLayer2Candidate(address,string)": FunctionFragment;
    "registerLayer2CandidateByOwner(address,address,string)": FunctionFragment;
    "retireMember()": FunctionFragment;
    "seigManager()": FunctionFragment;
    "setActivityRewardPerSecond(uint256)": FunctionFragment;
    "setAgendaManager(address)": FunctionFragment;
    "setAgendaStatus(uint256,uint256,uint256)": FunctionFragment;
    "setCandidateFactory(address)": FunctionFragment;
    "setCandidatesCommittee(address[],address)": FunctionFragment;
    "setCandidatesSeigManager(address[],address)": FunctionFragment;
    "setCreateAgendaFees(uint256)": FunctionFragment;
    "setDaoVault(address)": FunctionFragment;
    "setExecutingPeriodSeconds(uint256)": FunctionFragment;
    "setLayer2Registry(address)": FunctionFragment;
    "setMemoOnCandidate(address,string)": FunctionFragment;
    "setMemoOnCandidateContract(address,string)": FunctionFragment;
    "setMinimumNoticePeriodSeconds(uint256)": FunctionFragment;
    "setMinimumVotingPeriodSeconds(uint256)": FunctionFragment;
    "setQuorum(uint256)": FunctionFragment;
    "setSeigManager(address)": FunctionFragment;
    "setTon(address)": FunctionFragment;
    "ton()": FunctionFragment;
    "totalSupplyOnCandidate(address)": FunctionFragment;
    "totalSupplyOnCandidateContract(address)": FunctionFragment;
    "updateSeigniorage(address)": FunctionFragment;
    "updateSeigniorages(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activityRewardPerSecond"
      | "agendaManager"
      | "balanceOfOnCandidate"
      | "balanceOfOnCandidateContract"
      | "candidateContract"
      | "candidateFactory"
      | "candidateInfos"
      | "candidates"
      | "candidatesLength"
      | "castVote"
      | "changeMember"
      | "claimActivityReward"
      | "createCandidate"
      | "daoVault"
      | "decreaseMaxMember"
      | "endAgendaVoting"
      | "executeAgenda"
      | "getClaimableActivityReward"
      | "increaseMaxMember"
      | "isCandidate"
      | "isExistCandidate"
      | "isMember"
      | "layer2Registry"
      | "maxMember"
      | "members"
      | "onApprove"
      | "quorum"
      | "registerLayer2Candidate"
      | "registerLayer2CandidateByOwner"
      | "retireMember"
      | "seigManager"
      | "setActivityRewardPerSecond"
      | "setAgendaManager"
      | "setAgendaStatus"
      | "setCandidateFactory"
      | "setCandidatesCommittee"
      | "setCandidatesSeigManager"
      | "setCreateAgendaFees"
      | "setDaoVault"
      | "setExecutingPeriodSeconds"
      | "setLayer2Registry"
      | "setMemoOnCandidate"
      | "setMemoOnCandidateContract"
      | "setMinimumNoticePeriodSeconds"
      | "setMinimumVotingPeriodSeconds"
      | "setQuorum"
      | "setSeigManager"
      | "setTon"
      | "ton"
      | "totalSupplyOnCandidate"
      | "totalSupplyOnCandidateContract"
      | "updateSeigniorage"
      | "updateSeigniorages"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activityRewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agendaManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOnCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOnCandidateContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidatesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMember",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimActivityReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "daoVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseMaxMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endAgendaVoting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgenda",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableActivityReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMaxMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExistCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Registry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxMember", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerLayer2Candidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLayer2CandidateByOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retireMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActivityRewardPerSecond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgendaManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgendaStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidateFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidatesCommittee",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCandidatesSeigManager",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreateAgendaFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutingPeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayer2Registry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemoOnCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemoOnCandidateContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumNoticePeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumVotingPeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeigManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTon",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnCandidateContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorages",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "activityRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agendaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidatesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimActivityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMaxMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endAgendaVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgenda",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableActivityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMaxMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExistCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onApprove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLayer2CandidateByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActivityRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgendaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgendaStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidatesCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCandidatesSeigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreateAgendaFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayer2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemoOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemoOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumNoticePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumVotingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSeigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorages",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDAOCommittee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDAOCommitteeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activityRewardPerSecond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    agendaManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidateFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidates(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidatesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    castVote(
      _AgendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCandidate(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAgenda(
      _AgendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    layer2Registry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    members(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      tonAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setActivityRewardPerSecond(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAgendaManager(
      _agendaManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCandidateFactory(
      _candidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCandidatesCommittee(
      _candidateContracts: PromiseOrValue<string>[],
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCandidatesSeigManager(
      _candidateContracts: PromiseOrValue<string>[],
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreateAgendaFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoVault(
      _daoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayer2Registry(
      _layer2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemoOnCandidateContract(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeigManager(
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTon(
      _ton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ton(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activityRewardPerSecond(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  agendaManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOfOnCandidate(
    _candidate: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfOnCandidateContract(
    _candidateContract: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidateContract(
    _candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidateFactory(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidateInfos(
    _candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidates(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

  castVote(
    _AgendaID: PromiseOrValue<BigNumberish>,
    _vote: PromiseOrValue<BigNumberish>,
    _comment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMember(
    _memberIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimActivityReward(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCandidate(
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoVault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseMaxMember(
    _reducingMemberIndex: PromiseOrValue<BigNumberish>,
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAgendaVoting(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAgenda(
    _AgendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableActivityReward(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseMaxMember(
    _newMaxMember: PromiseOrValue<BigNumberish>,
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExistCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    _candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  layer2Registry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxMember(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  members(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onApprove(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    tonAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quorum(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerLayer2Candidate(
    _layer2: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerLayer2CandidateByOwner(
    _operator: PromiseOrValue<string>,
    _layer2: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireMember(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setActivityRewardPerSecond(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAgendaManager(
    _agendaManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAgendaStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCandidateFactory(
    _candidateFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCandidatesCommittee(
    _candidateContracts: PromiseOrValue<string>[],
    _committee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCandidatesSeigManager(
    _candidateContracts: PromiseOrValue<string>[],
    _seigManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreateAgendaFees(
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoVault(
    _daoVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutingPeriodSeconds(
    _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayer2Registry(
    _layer2Registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemoOnCandidate(
    _candidate: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemoOnCandidateContract(
    _candidate: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumNoticePeriodSeconds(
    _minimumNoticePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumVotingPeriodSeconds(
    _minimumVotingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuorum(
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeigManager(
    _seigManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTon(
    _ton: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ton(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupplyOnCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyOnCandidateContract(
    _candidateContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateSeigniorage(
    _candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSeigniorages(
    _candidates: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    agendaManager(overrides?: CallOverrides): Promise<string>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    candidateFactory(overrides?: CallOverrides): Promise<string>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStorageStateCommittee.CandidateInfoStructOutput>;

    candidates(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      _AgendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCandidate(
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoVault(overrides?: CallOverrides): Promise<string>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAgenda(
      _AgendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    layer2Registry(overrides?: CallOverrides): Promise<string>;

    maxMember(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      tonAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    retireMember(overrides?: CallOverrides): Promise<boolean>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    setActivityRewardPerSecond(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAgendaManager(
      _agendaManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCandidateFactory(
      _candidateFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCandidatesCommittee(
      _candidateContracts: PromiseOrValue<string>[],
      _committee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCandidatesSeigManager(
      _candidateContracts: PromiseOrValue<string>[],
      _seigManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreateAgendaFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoVault(
      _daoVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayer2Registry(
      _layer2Registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemoOnCandidateContract(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeigManager(
      _seigManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTon(
      _ton: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ton(overrides?: CallOverrides): Promise<string>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    activityRewardPerSecond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    agendaManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidateFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidates(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      _AgendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCandidate(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAgenda(
      _AgendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    layer2Registry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    members(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      tonAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setActivityRewardPerSecond(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAgendaManager(
      _agendaManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCandidateFactory(
      _candidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCandidatesCommittee(
      _candidateContracts: PromiseOrValue<string>[],
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCandidatesSeigManager(
      _candidateContracts: PromiseOrValue<string>[],
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreateAgendaFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoVault(
      _daoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayer2Registry(
      _layer2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemoOnCandidateContract(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeigManager(
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTon(
      _ton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ton(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activityRewardPerSecond(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    agendaManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidateFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidatesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    castVote(
      _AgendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCandidate(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAgenda(
      _AgendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    layer2Registry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    members(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onApprove(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      tonAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quorum(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setActivityRewardPerSecond(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAgendaManager(
      _agendaManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCandidateFactory(
      _candidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCandidatesCommittee(
      _candidateContracts: PromiseOrValue<string>[],
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCandidatesSeigManager(
      _candidateContracts: PromiseOrValue<string>[],
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreateAgendaFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoVault(
      _daoVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayer2Registry(
      _layer2Registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemoOnCandidateContract(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeigManager(
      _seigManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTon(
      _ton: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ton(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
