/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISeigManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_FACTOR()": FunctionFragment;
    "additionalTotBurnAmount(address,address,uint256)": FunctionFragment;
    "coinages(address)": FunctionFragment;
    "commissionRates(address)": FunctionFragment;
    "deployCoinage(address)": FunctionFragment;
    "depositManager()": FunctionFragment;
    "lastCommitBlock(address)": FunctionFragment;
    "lastSeigBlock()": FunctionFragment;
    "onDeposit(address,address,uint256)": FunctionFragment;
    "onTransfer(address,address,uint256)": FunctionFragment;
    "onWithdraw(address,address,uint256)": FunctionFragment;
    "pausedBlock()": FunctionFragment;
    "powerton()": FunctionFragment;
    "registry()": FunctionFragment;
    "seigPerBlock()": FunctionFragment;
    "setCommissionRate(address,uint256,bool)": FunctionFragment;
    "stakeOf(address,address)": FunctionFragment;
    "ton()": FunctionFragment;
    "tot()": FunctionFragment;
    "uncomittedStakeOf(address,address)": FunctionFragment;
    "unpausedBlock()": FunctionFragment;
    "updateSeigniorage()": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_FACTOR"
      | "additionalTotBurnAmount"
      | "coinages"
      | "commissionRates"
      | "deployCoinage"
      | "depositManager"
      | "lastCommitBlock"
      | "lastSeigBlock"
      | "onDeposit"
      | "onTransfer"
      | "onWithdraw"
      | "pausedBlock"
      | "powerton"
      | "registry"
      | "seigPerBlock"
      | "setCommissionRate"
      | "stakeOf"
      | "ton"
      | "tot"
      | "uncomittedStakeOf"
      | "unpausedBlock"
      | "updateSeigniorage"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "additionalTotBurnAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "coinages",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCoinage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCommitBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSeigBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "powerton", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seigPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(functionFragment: "tot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uncomittedStakeOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpausedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalTotBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coinages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commissionRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCoinage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCommitBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSeigBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onWithdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "powerton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uncomittedStakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpausedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {};
}

export interface ISeigManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISeigManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totAmount: BigNumber }>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSeigBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pausedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    powerton(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    seigPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commission: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    tot(overrides?: CallOverrides): Promise<[string]>;

    uncomittedStakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpausedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  additionalTotBurnAmount(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coinages(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  commissionRates(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployCoinage(
    layer2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  lastCommitBlock(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

  onDeposit(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onTransfer(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onWithdraw(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  powerton(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setCommissionRate(
    layer2: PromiseOrValue<string>,
    commission: PromiseOrValue<BigNumberish>,
    isCommissionRateNegative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeOf(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ton(overrides?: CallOverrides): Promise<string>;

  tot(overrides?: CallOverrides): Promise<string>;

  uncomittedStakeOf(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  updateSeigniorage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    powerton(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commission: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<string>;

    tot(overrides?: CallOverrides): Promise<string>;

    uncomittedStakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    updateSeigniorage(overrides?: CallOverrides): Promise<boolean>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    powerton(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commission: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    tot(overrides?: CallOverrides): Promise<BigNumber>;

    uncomittedStakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSeigBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pausedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seigPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commission: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uncomittedStakeOf(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpausedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
