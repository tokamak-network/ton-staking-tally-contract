/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LibAgenda {
  export type AgendaStruct = {
    createdTimestamp: PromiseOrValue<BigNumberish>;
    noticeEndTimestamp: PromiseOrValue<BigNumberish>;
    votingPeriodInSeconds: PromiseOrValue<BigNumberish>;
    votingStartedTimestamp: PromiseOrValue<BigNumberish>;
    votingEndTimestamp: PromiseOrValue<BigNumberish>;
    executableLimitTimestamp: PromiseOrValue<BigNumberish>;
    executedTimestamp: PromiseOrValue<BigNumberish>;
    countingYes: PromiseOrValue<BigNumberish>;
    countingNo: PromiseOrValue<BigNumberish>;
    countingAbstain: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    result: PromiseOrValue<BigNumberish>;
    voters: PromiseOrValue<string>[];
    executed: PromiseOrValue<boolean>;
  };

  export type AgendaStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string[],
    boolean
  ] & {
    createdTimestamp: BigNumber;
    noticeEndTimestamp: BigNumber;
    votingPeriodInSeconds: BigNumber;
    votingStartedTimestamp: BigNumber;
    votingEndTimestamp: BigNumber;
    executableLimitTimestamp: BigNumber;
    executedTimestamp: BigNumber;
    countingYes: BigNumber;
    countingNo: BigNumber;
    countingAbstain: BigNumber;
    status: number;
    result: number;
    voters: string[];
    executed: boolean;
  };

  export type VoterStruct = {
    isVoter: PromiseOrValue<boolean>;
    hasVoted: PromiseOrValue<boolean>;
    vote: PromiseOrValue<BigNumberish>;
  };

  export type VoterStructOutput = [boolean, boolean, BigNumber] & {
    isVoter: boolean;
    hasVoted: boolean;
    vote: BigNumber;
  };
}

export interface IDAOAgendaManagerInterface extends utils.Interface {
  functions: {
    "agendas(uint256)": FunctionFragment;
    "canExecuteAgenda(uint256)": FunctionFragment;
    "castVote(uint256,address,uint256)": FunctionFragment;
    "committee()": FunctionFragment;
    "createAgendaFees()": FunctionFragment;
    "endAgendaVoting(uint256)": FunctionFragment;
    "executingPeriodSeconds()": FunctionFragment;
    "getAgendaNoticeEndTimeSeconds(uint256)": FunctionFragment;
    "getAgendaResult(uint256)": FunctionFragment;
    "getAgendaStatus(uint256)": FunctionFragment;
    "getAgendaTimestamps(uint256)": FunctionFragment;
    "getAgendaVotingEndTimeSeconds(uint256)": FunctionFragment;
    "getAgendaVotingStartTimeSeconds(uint256)": FunctionFragment;
    "getExecutionInfo(uint256)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "getVoteStatus(uint256,address)": FunctionFragment;
    "getVoters(uint256)": FunctionFragment;
    "getVotingCount(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "isVotableStatus(uint256)": FunctionFragment;
    "isVoter(uint256,address)": FunctionFragment;
    "minimumNoticePeriodSeconds()": FunctionFragment;
    "minimumVotingPeriodSeconds()": FunctionFragment;
    "newAgenda(address[],uint256,uint256,bool,bytes[])": FunctionFragment;
    "numAgendas()": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setCreateAgendaFees(uint256)": FunctionFragment;
    "setExecutedAgenda(uint256)": FunctionFragment;
    "setExecutedCount(uint256,uint256)": FunctionFragment;
    "setExecutingPeriodSeconds(uint256)": FunctionFragment;
    "setMinimumNoticePeriodSeconds(uint256)": FunctionFragment;
    "setMinimumVotingPeriodSeconds(uint256)": FunctionFragment;
    "setResult(uint256,uint8)": FunctionFragment;
    "setStatus(uint256,uint8)": FunctionFragment;
    "totalAgendas()": FunctionFragment;
    "voterInfos(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agendas"
      | "canExecuteAgenda"
      | "castVote"
      | "committee"
      | "createAgendaFees"
      | "endAgendaVoting"
      | "executingPeriodSeconds"
      | "getAgendaNoticeEndTimeSeconds"
      | "getAgendaResult"
      | "getAgendaStatus"
      | "getAgendaTimestamps"
      | "getAgendaVotingEndTimeSeconds"
      | "getAgendaVotingStartTimeSeconds"
      | "getExecutionInfo"
      | "getStatus"
      | "getVoteStatus"
      | "getVoters"
      | "getVotingCount"
      | "hasVoted"
      | "isVotableStatus"
      | "isVoter"
      | "minimumNoticePeriodSeconds"
      | "minimumVotingPeriodSeconds"
      | "newAgenda"
      | "numAgendas"
      | "setCommittee"
      | "setCreateAgendaFees"
      | "setExecutedAgenda"
      | "setExecutedCount"
      | "setExecutingPeriodSeconds"
      | "setMinimumNoticePeriodSeconds"
      | "setMinimumVotingPeriodSeconds"
      | "setResult"
      | "setStatus"
      | "totalAgendas"
      | "voterInfos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agendas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteAgenda",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAgendaFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAgendaVoting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executingPeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaNoticeEndTimeSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaResult",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaTimestamps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaVotingEndTimeSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgendaVotingStartTimeSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotableStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumNoticePeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumVotingPeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAgenda",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numAgendas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreateAgendaFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutedAgenda",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutedCount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutingPeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumNoticePeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumVotingPeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAgendas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterInfos",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "agendas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteAgenda",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgendaFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endAgendaVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaNoticeEndTimeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaVotingEndTimeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgendaVotingStartTimeSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVotableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumNoticePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumVotingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newAgenda", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numAgendas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreateAgendaFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutedAgenda",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumNoticePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumVotingPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAgendas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterInfos", data: BytesLike): Result;

  events: {};
}

export interface IDAOAgendaManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDAOAgendaManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agendas(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibAgenda.AgendaStructOutput]>;

    canExecuteAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      _vote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    createAgendaFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executingPeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAgendaNoticeEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAgendaResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { result: BigNumber; executed: boolean }>;

    getAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { status: BigNumber }>;

    getAgendaTimestamps(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdTimestamp: BigNumber;
        noticeEndTimestamp: BigNumber;
        votingStartedTimestamp: BigNumber;
        votingEndTimestamp: BigNumber;
        executedTimestamp: BigNumber;
      }
    >;

    getAgendaVotingEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAgendaVotingStartTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExecutionInfo(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], boolean, BigNumber] & {
        target: string[];
        functionBytecode: string[];
        atomicExecute: boolean;
        executeStartFrom: BigNumber;
      }
    >;

    getStatus(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVoteStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getVoters(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getVotingCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        countingYes: BigNumber;
        countingNo: BigNumber;
        countingAbstain: BigNumber;
      }
    >;

    hasVoted(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVotableStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoter(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumNoticePeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumVotingPeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    newAgenda(
      _targets: PromiseOrValue<string>[],
      _noticePeriodSeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _atomicExecute: PromiseOrValue<boolean>,
      _functionBytecodes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numAgendas(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreateAgendaFees(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutedAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutedCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAgendas(overrides?: CallOverrides): Promise<[BigNumber]>;

    voterInfos(
      _index1: PromiseOrValue<BigNumberish>,
      _index2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LibAgenda.VoterStructOutput]>;
  };

  agendas(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibAgenda.AgendaStructOutput>;

  canExecuteAgenda(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  castVote(
    _agendaID: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    _vote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  committee(overrides?: CallOverrides): Promise<string>;

  createAgendaFees(overrides?: CallOverrides): Promise<BigNumber>;

  endAgendaVoting(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getAgendaNoticeEndTimeSeconds(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAgendaResult(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { result: BigNumber; executed: boolean }>;

  getAgendaStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAgendaTimestamps(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      createdTimestamp: BigNumber;
      noticeEndTimestamp: BigNumber;
      votingStartedTimestamp: BigNumber;
      votingEndTimestamp: BigNumber;
      executedTimestamp: BigNumber;
    }
  >;

  getAgendaVotingEndTimeSeconds(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAgendaVotingStartTimeSeconds(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExecutionInfo(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], boolean, BigNumber] & {
      target: string[];
      functionBytecode: string[];
      atomicExecute: boolean;
      executeStartFrom: BigNumber;
    }
  >;

  getStatus(
    _createAgendaFees: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getVoteStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getVoters(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVotingCount(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      countingYes: BigNumber;
      countingNo: BigNumber;
      countingAbstain: BigNumber;
    }
  >;

  hasVoted(
    _agendaID: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVotableStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoter(
    _agendaID: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumNoticePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  minimumVotingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  newAgenda(
    _targets: PromiseOrValue<string>[],
    _noticePeriodSeconds: PromiseOrValue<BigNumberish>,
    _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
    _atomicExecute: PromiseOrValue<boolean>,
    _functionBytecodes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numAgendas(overrides?: CallOverrides): Promise<BigNumber>;

  setCommittee(
    _committee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreateAgendaFees(
    _createAgendaFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutedAgenda(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutedCount(
    _agendaID: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutingPeriodSeconds(
    _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumNoticePeriodSeconds(
    _minimumNoticePeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumVotingPeriodSeconds(
    _minimumVotingPeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setResult(
    _agendaID: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAgendas(overrides?: CallOverrides): Promise<BigNumber>;

  voterInfos(
    _index1: PromiseOrValue<BigNumberish>,
    _index2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LibAgenda.VoterStructOutput>;

  callStatic: {
    agendas(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibAgenda.AgendaStructOutput>;

    canExecuteAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      _vote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    committee(overrides?: CallOverrides): Promise<string>;

    createAgendaFees(overrides?: CallOverrides): Promise<BigNumber>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAgendaNoticeEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { result: BigNumber; executed: boolean }>;

    getAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaTimestamps(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdTimestamp: BigNumber;
        noticeEndTimestamp: BigNumber;
        votingStartedTimestamp: BigNumber;
        votingEndTimestamp: BigNumber;
        executedTimestamp: BigNumber;
      }
    >;

    getAgendaVotingEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaVotingStartTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionInfo(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], boolean, BigNumber] & {
        target: string[];
        functionBytecode: string[];
        atomicExecute: boolean;
        executeStartFrom: BigNumber;
      }
    >;

    getStatus(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVoteStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getVoters(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVotingCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        countingYes: BigNumber;
        countingNo: BigNumber;
        countingAbstain: BigNumber;
      }
    >;

    hasVoted(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVotableStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoter(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumNoticePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    minimumVotingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    newAgenda(
      _targets: PromiseOrValue<string>[],
      _noticePeriodSeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _atomicExecute: PromiseOrValue<boolean>,
      _functionBytecodes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numAgendas(overrides?: CallOverrides): Promise<BigNumber>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreateAgendaFees(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutedAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutedCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAgendas(overrides?: CallOverrides): Promise<BigNumber>;

    voterInfos(
      _index1: PromiseOrValue<BigNumberish>,
      _index2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LibAgenda.VoterStructOutput>;
  };

  filters: {};

  estimateGas: {
    agendas(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecuteAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      _vote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    createAgendaFees(overrides?: CallOverrides): Promise<BigNumber>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAgendaNoticeEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaTimestamps(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaVotingEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgendaVotingStartTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionInfo(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoters(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVotableStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoter(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumNoticePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    minimumVotingPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    newAgenda(
      _targets: PromiseOrValue<string>[],
      _noticePeriodSeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _atomicExecute: PromiseOrValue<boolean>,
      _functionBytecodes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numAgendas(overrides?: CallOverrides): Promise<BigNumber>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreateAgendaFees(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutedAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutedCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAgendas(overrides?: CallOverrides): Promise<BigNumber>;

    voterInfos(
      _index1: PromiseOrValue<BigNumberish>,
      _index2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agendas(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecuteAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      _vote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAgendaFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executingPeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaNoticeEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaTimestamps(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaVotingEndTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgendaVotingStartTimeSeconds(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutionInfo(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoters(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVotableStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoter(
      _agendaID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumNoticePeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVotingPeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newAgenda(
      _targets: PromiseOrValue<string>[],
      _noticePeriodSeconds: PromiseOrValue<BigNumberish>,
      _votingPeriodSeconds: PromiseOrValue<BigNumberish>,
      _atomicExecute: PromiseOrValue<boolean>,
      _functionBytecodes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numAgendas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommittee(
      _committee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreateAgendaFees(
      _createAgendaFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutedAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutedCount(
      _agendaID: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutingPeriodSeconds(
      _executingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumNoticePeriodSeconds(
      _minimumNoticePeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumVotingPeriodSeconds(
      _minimumVotingPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setResult(
      _agendaID: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAgendas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterInfos(
      _index1: PromiseOrValue<BigNumberish>,
      _index2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
