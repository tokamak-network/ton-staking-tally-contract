/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StorageStateCommittee {
  export type CandidateInfoStruct = {
    candidateContract: PromiseOrValue<string>;
    indexMembers: PromiseOrValue<BigNumberish>;
    memberJoinedTime: PromiseOrValue<BigNumberish>;
    rewardPeriod: PromiseOrValue<BigNumberish>;
    claimedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CandidateInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    candidateContract: string;
    indexMembers: BigNumber;
    memberJoinedTime: BigNumber;
    rewardPeriod: BigNumber;
    claimedTimestamp: BigNumber;
  };
}

export declare namespace StorageStateCommitteeV2 {
  export type CandidateInfo2Struct = {
    candidateContract: PromiseOrValue<string>;
    newCandidate: PromiseOrValue<string>;
    indexMembers: PromiseOrValue<BigNumberish>;
    memberJoinedTime: PromiseOrValue<BigNumberish>;
    rewardPeriod: PromiseOrValue<BigNumberish>;
    claimedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CandidateInfo2StructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    candidateContract: string;
    newCandidate: string;
    indexMembers: BigNumber;
    memberJoinedTime: BigNumber;
    rewardPeriod: BigNumber;
    claimedTimestamp: BigNumber;
  };
}

export interface DAOCommitteeDAOVaultInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_toRAY(uint256)": FunctionFragment;
    "activityRewardPerSecond()": FunctionFragment;
    "agendaManager()": FunctionFragment;
    "balanceOfOnCandidate(address,address)": FunctionFragment;
    "balanceOfOnCandidateContract(address,address)": FunctionFragment;
    "candidateContract(address)": FunctionFragment;
    "candidateFactory()": FunctionFragment;
    "candidateInfos(address)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "candidatesLength()": FunctionFragment;
    "castVote(uint256,uint256,string)": FunctionFragment;
    "changeMember(uint256)": FunctionFragment;
    "claimActivityReward(address)": FunctionFragment;
    "createCandidate(string,address)": FunctionFragment;
    "createCandidate(string)": FunctionFragment;
    "daoVault()": FunctionFragment;
    "decreaseMaxMember(uint256,uint256)": FunctionFragment;
    "endAgendaVoting(uint256)": FunctionFragment;
    "executeAgenda(uint256)": FunctionFragment;
    "getClaimableActivityReward(address)": FunctionFragment;
    "getOldCandidateInfos(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseMaxMember(uint256,uint256)": FunctionFragment;
    "isCandidate(address)": FunctionFragment;
    "isExistCandidate(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "layer2Registry()": FunctionFragment;
    "maxMember()": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "onApprove(address,address,uint256,bytes)": FunctionFragment;
    "pauseProxy()": FunctionFragment;
    "quorum()": FunctionFragment;
    "registerLayer2Candidate(address,string)": FunctionFragment;
    "registerLayer2CandidateByOwner(address,address,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "retireMember()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "seigManager()": FunctionFragment;
    "setAgendaStatus(uint256,uint256,uint256)": FunctionFragment;
    "setMemoOnCandidate(address,string)": FunctionFragment;
    "setMemoOnCandidateContract(address,string)": FunctionFragment;
    "setQuorum(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ton()": FunctionFragment;
    "totalSupplyOnCandidate(address)": FunctionFragment;
    "totalSupplyOnCandidateContract(address)": FunctionFragment;
    "updateSeigniorage(address)": FunctionFragment;
    "updateSeigniorages(address[])": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "_toRAY"
      | "activityRewardPerSecond"
      | "agendaManager"
      | "balanceOfOnCandidate"
      | "balanceOfOnCandidateContract"
      | "candidateContract"
      | "candidateFactory"
      | "candidateInfos"
      | "candidates"
      | "candidatesLength"
      | "castVote"
      | "changeMember"
      | "claimActivityReward"
      | "createCandidate(string,address)"
      | "createCandidate(string)"
      | "daoVault"
      | "decreaseMaxMember"
      | "endAgendaVoting"
      | "executeAgenda"
      | "getClaimableActivityReward"
      | "getOldCandidateInfos"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "increaseMaxMember"
      | "isCandidate"
      | "isExistCandidate"
      | "isMember"
      | "layer2Registry"
      | "maxMember"
      | "members"
      | "onApprove"
      | "pauseProxy"
      | "quorum"
      | "registerLayer2Candidate"
      | "registerLayer2CandidateByOwner"
      | "renounceRole"
      | "retireMember"
      | "revokeRole"
      | "seigManager"
      | "setAgendaStatus"
      | "setMemoOnCandidate"
      | "setMemoOnCandidateContract"
      | "setQuorum"
      | "supportsInterface"
      | "ton"
      | "totalSupplyOnCandidate"
      | "totalSupplyOnCandidateContract"
      | "updateSeigniorage"
      | "updateSeigniorages"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_toRAY",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activityRewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agendaManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOnCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfOnCandidateContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidatesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMember",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimActivityReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCandidate(string,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCandidate(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "daoVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseMaxMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endAgendaVoting",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgenda",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableActivityReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOldCandidateInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMaxMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExistCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Registry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxMember", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerLayer2Candidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLayer2CandidateByOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "retireMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAgendaStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemoOnCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemoOnCandidateContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnCandidateContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorages",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_toRAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activityRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agendaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidatesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimActivityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCandidate(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCandidate(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseMaxMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endAgendaVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgenda",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableActivityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldCandidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseMaxMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExistCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onApprove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLayer2CandidateByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgendaStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemoOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemoOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnCandidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "AgendaCreated(address,uint256,address[],uint128,uint128,bool)": EventFragment;
    "AgendaExecuted(uint256,address[])": EventFragment;
    "AgendaVoteCasted(address,uint256,uint256,string)": EventFragment;
    "CandidateContractCreated(address,address,string)": EventFragment;
    "ChangedMember(uint256,address,address)": EventFragment;
    "ChangedMemo(address,string)": EventFragment;
    "ChangedSlotMaximum(uint256,uint256)": EventFragment;
    "ClaimedActivityReward(address,address,uint256)": EventFragment;
    "Layer2Registered(address,address,string)": EventFragment;
    "QuorumChanged(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgendaCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgendaExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgendaVoteCasted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedMemo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedSlotMaximum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedActivityReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Layer2Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AgendaCreatedEventObject {
  from: string;
  id: BigNumber;
  targets: string[];
  noticePeriodSeconds: BigNumber;
  votingPeriodSeconds: BigNumber;
  atomicExecute: boolean;
}
export type AgendaCreatedEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber, BigNumber, boolean],
  AgendaCreatedEventObject
>;

export type AgendaCreatedEventFilter = TypedEventFilter<AgendaCreatedEvent>;

export interface AgendaExecutedEventObject {
  id: BigNumber;
  target: string[];
}
export type AgendaExecutedEvent = TypedEvent<
  [BigNumber, string[]],
  AgendaExecutedEventObject
>;

export type AgendaExecutedEventFilter = TypedEventFilter<AgendaExecutedEvent>;

export interface AgendaVoteCastedEventObject {
  from: string;
  id: BigNumber;
  voting: BigNumber;
  comment: string;
}
export type AgendaVoteCastedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  AgendaVoteCastedEventObject
>;

export type AgendaVoteCastedEventFilter =
  TypedEventFilter<AgendaVoteCastedEvent>;

export interface CandidateContractCreatedEventObject {
  candidate: string;
  candidateContract: string;
  memo: string;
}
export type CandidateContractCreatedEvent = TypedEvent<
  [string, string, string],
  CandidateContractCreatedEventObject
>;

export type CandidateContractCreatedEventFilter =
  TypedEventFilter<CandidateContractCreatedEvent>;

export interface ChangedMemberEventObject {
  slotIndex: BigNumber;
  prevMember: string;
  newMember: string;
}
export type ChangedMemberEvent = TypedEvent<
  [BigNumber, string, string],
  ChangedMemberEventObject
>;

export type ChangedMemberEventFilter = TypedEventFilter<ChangedMemberEvent>;

export interface ChangedMemoEventObject {
  candidate: string;
  newMemo: string;
}
export type ChangedMemoEvent = TypedEvent<
  [string, string],
  ChangedMemoEventObject
>;

export type ChangedMemoEventFilter = TypedEventFilter<ChangedMemoEvent>;

export interface ChangedSlotMaximumEventObject {
  prevSlotMax: BigNumber;
  slotMax: BigNumber;
}
export type ChangedSlotMaximumEvent = TypedEvent<
  [BigNumber, BigNumber],
  ChangedSlotMaximumEventObject
>;

export type ChangedSlotMaximumEventFilter =
  TypedEventFilter<ChangedSlotMaximumEvent>;

export interface ClaimedActivityRewardEventObject {
  candidate: string;
  receiver: string;
  amount: BigNumber;
}
export type ClaimedActivityRewardEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimedActivityRewardEventObject
>;

export type ClaimedActivityRewardEventFilter =
  TypedEventFilter<ClaimedActivityRewardEvent>;

export interface Layer2RegisteredEventObject {
  candidate: string;
  candidateContract: string;
  memo: string;
}
export type Layer2RegisteredEvent = TypedEvent<
  [string, string, string],
  Layer2RegisteredEventObject
>;

export type Layer2RegisteredEventFilter =
  TypedEventFilter<Layer2RegisteredEvent>;

export interface QuorumChangedEventObject {
  newQuorum: BigNumber;
}
export type QuorumChangedEvent = TypedEvent<
  [BigNumber],
  QuorumChangedEventObject
>;

export type QuorumChangedEventFilter = TypedEventFilter<QuorumChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface DAOCommitteeDAOVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOCommitteeDAOVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _toRAY(
      v: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    agendaManager(overrides?: CallOverrides): Promise<[string]>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidateFactory(overrides?: CallOverrides): Promise<[string]>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StorageStateCommittee.CandidateInfoStructOutput]>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidatesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createCandidate(string,address)"(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createCandidate(string)"(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoVault(overrides?: CallOverrides): Promise<[string]>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOldCandidateInfos(
      _oldCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StorageStateCommitteeV2.CandidateInfo2StructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isExist: boolean }>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    layer2Registry(overrides?: CallOverrides): Promise<[string]>;

    maxMember(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onApprove(
      owner: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<[boolean]>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemoOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalsupply: BigNumber }>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalsupply: BigNumber }>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _toRAY(
    v: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  agendaManager(overrides?: CallOverrides): Promise<string>;

  balanceOfOnCandidate(
    _candidate: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfOnCandidateContract(
    _candidateContract: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidateContract(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  candidateFactory(overrides?: CallOverrides): Promise<string>;

  candidateInfos(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StorageStateCommittee.CandidateInfoStructOutput>;

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

  castVote(
    _agendaID: PromiseOrValue<BigNumberish>,
    _vote: PromiseOrValue<BigNumberish>,
    _comment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMember(
    _memberIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimActivityReward(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createCandidate(string,address)"(
    _memo: PromiseOrValue<string>,
    _operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createCandidate(string)"(
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoVault(overrides?: CallOverrides): Promise<string>;

  decreaseMaxMember(
    _reducingMemberIndex: PromiseOrValue<BigNumberish>,
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAgendaVoting(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAgenda(
    _agendaID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableActivityReward(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOldCandidateInfos(
    _oldCandidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StorageStateCommitteeV2.CandidateInfo2StructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseMaxMember(
    _newMaxMember: PromiseOrValue<BigNumberish>,
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExistCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  layer2Registry(overrides?: CallOverrides): Promise<string>;

  maxMember(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  onApprove(
    owner: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseProxy(overrides?: CallOverrides): Promise<boolean>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  registerLayer2Candidate(
    _layer2: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerLayer2CandidateByOwner(
    _operator: PromiseOrValue<string>,
    _layer2: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireMember(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigManager(overrides?: CallOverrides): Promise<string>;

  setAgendaStatus(
    _agendaID: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemoOnCandidate(
    _candidate: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemoOnCandidateContract(
    _candidateContract: PromiseOrValue<string>,
    _memo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuorum(
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ton(overrides?: CallOverrides): Promise<string>;

  totalSupplyOnCandidate(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyOnCandidateContract(
    _candidateContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateSeigniorage(
    _candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSeigniorages(
    _candidates: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _toRAY(
      v: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    agendaManager(overrides?: CallOverrides): Promise<string>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    candidateFactory(overrides?: CallOverrides): Promise<string>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StorageStateCommittee.CandidateInfoStructOutput>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCandidate(string,address)"(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCandidate(string)"(
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoVault(overrides?: CallOverrides): Promise<string>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldCandidateInfos(
      _oldCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StorageStateCommitteeV2.CandidateInfo2StructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    layer2Registry(overrides?: CallOverrides): Promise<string>;

    maxMember(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onApprove(
      owner: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pauseProxy(overrides?: CallOverrides): Promise<boolean>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    retireMember(overrides?: CallOverrides): Promise<boolean>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemoOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ton(overrides?: CallOverrides): Promise<string>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AgendaCreated(address,uint256,address[],uint128,uint128,bool)"(
      from?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      noticePeriodSeconds?: null,
      votingPeriodSeconds?: null,
      atomicExecute?: null
    ): AgendaCreatedEventFilter;
    AgendaCreated(
      from?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      targets?: null,
      noticePeriodSeconds?: null,
      votingPeriodSeconds?: null,
      atomicExecute?: null
    ): AgendaCreatedEventFilter;

    "AgendaExecuted(uint256,address[])"(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null
    ): AgendaExecutedEventFilter;
    AgendaExecuted(
      id?: PromiseOrValue<BigNumberish> | null,
      target?: null
    ): AgendaExecutedEventFilter;

    "AgendaVoteCasted(address,uint256,uint256,string)"(
      from?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      voting?: null,
      comment?: null
    ): AgendaVoteCastedEventFilter;
    AgendaVoteCasted(
      from?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      voting?: null,
      comment?: null
    ): AgendaVoteCastedEventFilter;

    "CandidateContractCreated(address,address,string)"(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): CandidateContractCreatedEventFilter;
    CandidateContractCreated(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): CandidateContractCreatedEventFilter;

    "ChangedMember(uint256,address,address)"(
      slotIndex?: PromiseOrValue<BigNumberish> | null,
      prevMember?: null,
      newMember?: PromiseOrValue<string> | null
    ): ChangedMemberEventFilter;
    ChangedMember(
      slotIndex?: PromiseOrValue<BigNumberish> | null,
      prevMember?: null,
      newMember?: PromiseOrValue<string> | null
    ): ChangedMemberEventFilter;

    "ChangedMemo(address,string)"(
      candidate?: null,
      newMemo?: null
    ): ChangedMemoEventFilter;
    ChangedMemo(candidate?: null, newMemo?: null): ChangedMemoEventFilter;

    "ChangedSlotMaximum(uint256,uint256)"(
      prevSlotMax?: PromiseOrValue<BigNumberish> | null,
      slotMax?: PromiseOrValue<BigNumberish> | null
    ): ChangedSlotMaximumEventFilter;
    ChangedSlotMaximum(
      prevSlotMax?: PromiseOrValue<BigNumberish> | null,
      slotMax?: PromiseOrValue<BigNumberish> | null
    ): ChangedSlotMaximumEventFilter;

    "ClaimedActivityReward(address,address,uint256)"(
      candidate?: PromiseOrValue<string> | null,
      receiver?: null,
      amount?: null
    ): ClaimedActivityRewardEventFilter;
    ClaimedActivityReward(
      candidate?: PromiseOrValue<string> | null,
      receiver?: null,
      amount?: null
    ): ClaimedActivityRewardEventFilter;

    "Layer2Registered(address,address,string)"(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): Layer2RegisteredEventFilter;
    Layer2Registered(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): Layer2RegisteredEventFilter;

    "QuorumChanged(uint256)"(newQuorum?: null): QuorumChangedEventFilter;
    QuorumChanged(newQuorum?: null): QuorumChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _toRAY(
      v: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    agendaManager(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateFactory(overrides?: CallOverrides): Promise<BigNumber>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createCandidate(string,address)"(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createCandidate(string)"(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoVault(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldCandidateInfos(
      _oldCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layer2Registry(overrides?: CallOverrides): Promise<BigNumber>;

    maxMember(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onApprove(
      owner: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseProxy(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemoOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _toRAY(
      v: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activityRewardPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agendaManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfOnCandidate(
      _candidate: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidatesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    castVote(
      _agendaID: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<BigNumberish>,
      _comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMember(
      _memberIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimActivityReward(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createCandidate(string,address)"(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createCandidate(string)"(
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseMaxMember(
      _reducingMemberIndex: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAgendaVoting(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAgenda(
      _agendaID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableActivityReward(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOldCandidateInfos(
      _oldCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseMaxMember(
      _newMaxMember: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExistCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMember(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onApprove(
      owner: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerLayer2Candidate(
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerLayer2CandidateByOwner(
      _operator: PromiseOrValue<string>,
      _layer2: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireMember(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAgendaStatus(
      _agendaID: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemoOnCandidate(
      _candidate: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemoOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      _memo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyOnCandidate(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOnCandidateContract(
      _candidateContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSeigniorage(
      _candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSeigniorages(
      _candidates: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
