/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace StorageStateCommittee {
  export type CandidateInfoStruct = {
    candidateContract: PromiseOrValue<string>;
    indexMembers: PromiseOrValue<BigNumberish>;
    memberJoinedTime: PromiseOrValue<BigNumberish>;
    rewardPeriod: PromiseOrValue<BigNumberish>;
    claimedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CandidateInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    candidateContract: string;
    indexMembers: BigNumber;
    memberJoinedTime: BigNumber;
    rewardPeriod: BigNumber;
    claimedTimestamp: BigNumber;
  };
}

export interface DAOCommitteeAddV1_1Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "activityRewardPerSecond()": FunctionFragment;
    "agendaManager()": FunctionFragment;
    "candidateContract(address)": FunctionFragment;
    "candidateFactory()": FunctionFragment;
    "candidateInfos(address)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "createLayer2Candidate(string,address)": FunctionFragment;
    "daoVault()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "layer2CandidateFactory()": FunctionFragment;
    "layer2Manager()": FunctionFragment;
    "layer2Registry()": FunctionFragment;
    "maxMember()": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "pauseProxy()": FunctionFragment;
    "quorum()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "seigManager()": FunctionFragment;
    "setLayer2CandidateFactory(address)": FunctionFragment;
    "setLayer2Manager(address)": FunctionFragment;
    "setTargetLayer2StartBlock(address,uint256)": FunctionFragment;
    "setTargetSetImplementation2(address,address,uint256,bool)": FunctionFragment;
    "setTargetSetL2Registry(address,address)": FunctionFragment;
    "setTargetSetLayer2Manager(address,address)": FunctionFragment;
    "setTargetSetSelectorImplementations2(address,bytes4[],address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ton()": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "activityRewardPerSecond"
      | "agendaManager"
      | "candidateContract"
      | "candidateFactory"
      | "candidateInfos"
      | "candidates"
      | "createLayer2Candidate"
      | "daoVault"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "isMember"
      | "layer2CandidateFactory"
      | "layer2Manager"
      | "layer2Registry"
      | "maxMember"
      | "members"
      | "pauseProxy"
      | "quorum"
      | "renounceRole"
      | "revokeRole"
      | "seigManager"
      | "setLayer2CandidateFactory"
      | "setLayer2Manager"
      | "setTargetLayer2StartBlock"
      | "setTargetSetImplementation2"
      | "setTargetSetL2Registry"
      | "setTargetSetLayer2Manager"
      | "setTargetSetSelectorImplementations2"
      | "supportsInterface"
      | "ton"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activityRewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agendaManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLayer2Candidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "daoVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "layer2CandidateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Manager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Registry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxMember", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLayer2CandidateFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayer2Manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetLayer2StartBlock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetSetImplementation2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetSetL2Registry",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetSetLayer2Manager",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetSetSelectorImplementations2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activityRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agendaManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLayer2Candidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layer2CandidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layer2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayer2CandidateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetLayer2StartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetSetImplementation2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetSetL2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetSetLayer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetSetSelectorImplementations2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "CandidateContractCreated(address,address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface CandidateContractCreatedEventObject {
  candidate: string;
  candidateContract: string;
  memo: string;
}
export type CandidateContractCreatedEvent = TypedEvent<
  [string, string, string],
  CandidateContractCreatedEventObject
>;

export type CandidateContractCreatedEventFilter =
  TypedEventFilter<CandidateContractCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface DAOCommitteeAddV1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOCommitteeAddV1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    agendaManager(overrides?: CallOverrides): Promise<[string]>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidateFactory(overrides?: CallOverrides): Promise<[string]>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StorageStateCommittee.CandidateInfoStructOutput]>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createLayer2Candidate(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoVault(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    layer2CandidateFactory(overrides?: CallOverrides): Promise<[string]>;

    layer2Manager(overrides?: CallOverrides): Promise<[string]>;

    layer2Registry(overrides?: CallOverrides): Promise<[string]>;

    maxMember(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauseProxy(overrides?: CallOverrides): Promise<[boolean]>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    setLayer2CandidateFactory(
      _layer2CandidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayer2Manager(
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetLayer2StartBlock(
      target: PromiseOrValue<string>,
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetSetImplementation2(
      target: PromiseOrValue<string>,
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetSetL2Registry(
      target: PromiseOrValue<string>,
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetSetLayer2Manager(
      target: PromiseOrValue<string>,
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetSetSelectorImplementations2(
      target: PromiseOrValue<string>,
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  agendaManager(overrides?: CallOverrides): Promise<string>;

  candidateContract(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  candidateFactory(overrides?: CallOverrides): Promise<string>;

  candidateInfos(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StorageStateCommittee.CandidateInfoStructOutput>;

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createLayer2Candidate(
    _memo: PromiseOrValue<string>,
    _operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoVault(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(
    _candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  layer2CandidateFactory(overrides?: CallOverrides): Promise<string>;

  layer2Manager(overrides?: CallOverrides): Promise<string>;

  layer2Registry(overrides?: CallOverrides): Promise<string>;

  maxMember(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseProxy(overrides?: CallOverrides): Promise<boolean>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigManager(overrides?: CallOverrides): Promise<string>;

  setLayer2CandidateFactory(
    _layer2CandidateFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayer2Manager(
    _layer2Manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetLayer2StartBlock(
    target: PromiseOrValue<string>,
    startBlock_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetSetImplementation2(
    target: PromiseOrValue<string>,
    newImplementation: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    alive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetSetL2Registry(
    target: PromiseOrValue<string>,
    l2Registry_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetSetLayer2Manager(
    target: PromiseOrValue<string>,
    layer2Manager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetSetSelectorImplementations2(
    target: PromiseOrValue<string>,
    _selectors: PromiseOrValue<BytesLike>[],
    _imp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ton(overrides?: CallOverrides): Promise<string>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    agendaManager(overrides?: CallOverrides): Promise<string>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    candidateFactory(overrides?: CallOverrides): Promise<string>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StorageStateCommittee.CandidateInfoStructOutput>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createLayer2Candidate(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    daoVault(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    layer2CandidateFactory(overrides?: CallOverrides): Promise<string>;

    layer2Manager(overrides?: CallOverrides): Promise<string>;

    layer2Registry(overrides?: CallOverrides): Promise<string>;

    maxMember(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseProxy(overrides?: CallOverrides): Promise<boolean>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    setLayer2CandidateFactory(
      _layer2CandidateFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayer2Manager(
      _layer2Manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetLayer2StartBlock(
      target: PromiseOrValue<string>,
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetSetImplementation2(
      target: PromiseOrValue<string>,
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetSetL2Registry(
      target: PromiseOrValue<string>,
      l2Registry_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetSetLayer2Manager(
      target: PromiseOrValue<string>,
      layer2Manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetSetSelectorImplementations2(
      target: PromiseOrValue<string>,
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ton(overrides?: CallOverrides): Promise<string>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CandidateContractCreated(address,address,string)"(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): CandidateContractCreatedEventFilter;
    CandidateContractCreated(
      candidate?: PromiseOrValue<string> | null,
      candidateContract?: PromiseOrValue<string> | null,
      memo?: null
    ): CandidateContractCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activityRewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    agendaManager(overrides?: CallOverrides): Promise<BigNumber>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateFactory(overrides?: CallOverrides): Promise<BigNumber>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLayer2Candidate(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoVault(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layer2CandidateFactory(overrides?: CallOverrides): Promise<BigNumber>;

    layer2Manager(overrides?: CallOverrides): Promise<BigNumber>;

    layer2Registry(overrides?: CallOverrides): Promise<BigNumber>;

    maxMember(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseProxy(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    setLayer2CandidateFactory(
      _layer2CandidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayer2Manager(
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetLayer2StartBlock(
      target: PromiseOrValue<string>,
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetSetImplementation2(
      target: PromiseOrValue<string>,
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetSetL2Registry(
      target: PromiseOrValue<string>,
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetSetLayer2Manager(
      target: PromiseOrValue<string>,
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetSetSelectorImplementations2(
      target: PromiseOrValue<string>,
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activityRewardPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agendaManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateContract(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateInfos(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLayer2Candidate(
      _memo: PromiseOrValue<string>,
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2CandidateFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2Manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    layer2Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMember(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLayer2CandidateFactory(
      _layer2CandidateFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayer2Manager(
      _layer2Manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetLayer2StartBlock(
      target: PromiseOrValue<string>,
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetSetImplementation2(
      target: PromiseOrValue<string>,
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetSetL2Registry(
      target: PromiseOrValue<string>,
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetSetLayer2Manager(
      target: PromiseOrValue<string>,
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetSetSelectorImplementations2(
      target: PromiseOrValue<string>,
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
