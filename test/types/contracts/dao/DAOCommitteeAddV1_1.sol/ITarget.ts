/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ITargetInterface extends utils.Interface {
  functions: {
    "setImplementation2(address,uint256,bool)": FunctionFragment;
    "setL2Registry(address)": FunctionFragment;
    "setLayer2Manager(address)": FunctionFragment;
    "setLayer2StartBlock(uint256)": FunctionFragment;
    "setSelectorImplementations2(bytes4[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setImplementation2"
      | "setL2Registry"
      | "setLayer2Manager"
      | "setLayer2StartBlock"
      | "setSelectorImplementations2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setImplementation2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2Registry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayer2Manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayer2StartBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSelectorImplementations2",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setImplementation2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayer2Manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayer2StartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSelectorImplementations2",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setImplementation2(
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2Registry(
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayer2Manager(
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayer2StartBlock(
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSelectorImplementations2(
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setImplementation2(
    newImplementation: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    alive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2Registry(
    l2Registry_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayer2Manager(
    layer2Manager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayer2StartBlock(
    startBlock_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSelectorImplementations2(
    _selectors: PromiseOrValue<BytesLike>[],
    _imp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setImplementation2(
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2Registry(
      l2Registry_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayer2Manager(
      layer2Manager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayer2StartBlock(
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSelectorImplementations2(
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setImplementation2(
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2Registry(
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayer2Manager(
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayer2StartBlock(
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSelectorImplementations2(
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setImplementation2(
      newImplementation: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      alive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2Registry(
      l2Registry_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayer2Manager(
      layer2Manager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayer2StartBlock(
      startBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSelectorImplementations2(
      _selectors: PromiseOrValue<BytesLike>[],
      _imp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
