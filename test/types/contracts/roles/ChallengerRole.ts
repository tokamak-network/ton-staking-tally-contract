/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ChallengerRoleInterface extends utils.Interface {
  functions: {
    "addChallenger(address)": FunctionFragment;
    "isChallenger(address)": FunctionFragment;
    "renounceChallenger()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addChallenger"
      | "isChallenger"
      | "renounceChallenger"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceChallenger",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceChallenger",
    data: BytesLike
  ): Result;

  events: {
    "ChallengerAdded(address)": EventFragment;
    "ChallengerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengerRemoved"): EventFragment;
}

export interface ChallengerAddedEventObject {
  account: string;
}
export type ChallengerAddedEvent = TypedEvent<
  [string],
  ChallengerAddedEventObject
>;

export type ChallengerAddedEventFilter = TypedEventFilter<ChallengerAddedEvent>;

export interface ChallengerRemovedEventObject {
  account: string;
}
export type ChallengerRemovedEvent = TypedEvent<
  [string],
  ChallengerRemovedEventObject
>;

export type ChallengerRemovedEventFilter =
  TypedEventFilter<ChallengerRemovedEvent>;

export interface ChallengerRole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChallengerRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addChallenger(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isChallenger(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceChallenger(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceChallenger(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChallengerAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): ChallengerAddedEventFilter;
    ChallengerAdded(
      account?: PromiseOrValue<string> | null
    ): ChallengerAddedEventFilter;

    "ChallengerRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): ChallengerRemovedEventFilter;
    ChallengerRemoved(
      account?: PromiseOrValue<string> | null
    ): ChallengerRemovedEventFilter;
  };

  estimateGas: {
    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
