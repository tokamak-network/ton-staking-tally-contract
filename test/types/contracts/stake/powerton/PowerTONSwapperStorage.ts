/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface PowerTONSwapperStorageInterface extends utils.Interface {
  functions: {
    "autocoinageSnapshot()": FunctionFragment;
    "layer2Registry()": FunctionFragment;
    "migratedL2()": FunctionFragment;
    "pauseProxy()": FunctionFragment;
    "seigManager()": FunctionFragment;
    "tos()": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "autocoinageSnapshot"
      | "layer2Registry"
      | "migratedL2"
      | "pauseProxy"
      | "seigManager"
      | "tos"
      | "uniswapRouter"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "autocoinageSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layer2Registry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migratedL2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "autocoinageSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layer2Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migratedL2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {};
}

export interface PowerTONSwapperStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PowerTONSwapperStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    autocoinageSnapshot(overrides?: CallOverrides): Promise<[string]>;

    layer2Registry(overrides?: CallOverrides): Promise<[string]>;

    migratedL2(overrides?: CallOverrides): Promise<[boolean]>;

    pauseProxy(overrides?: CallOverrides): Promise<[boolean]>;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    tos(overrides?: CallOverrides): Promise<[string]>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  autocoinageSnapshot(overrides?: CallOverrides): Promise<string>;

  layer2Registry(overrides?: CallOverrides): Promise<string>;

  migratedL2(overrides?: CallOverrides): Promise<boolean>;

  pauseProxy(overrides?: CallOverrides): Promise<boolean>;

  seigManager(overrides?: CallOverrides): Promise<string>;

  tos(overrides?: CallOverrides): Promise<string>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    autocoinageSnapshot(overrides?: CallOverrides): Promise<string>;

    layer2Registry(overrides?: CallOverrides): Promise<string>;

    migratedL2(overrides?: CallOverrides): Promise<boolean>;

    pauseProxy(overrides?: CallOverrides): Promise<boolean>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    tos(overrides?: CallOverrides): Promise<string>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    autocoinageSnapshot(overrides?: CallOverrides): Promise<BigNumber>;

    layer2Registry(overrides?: CallOverrides): Promise<BigNumber>;

    migratedL2(overrides?: CallOverrides): Promise<BigNumber>;

    pauseProxy(overrides?: CallOverrides): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    tos(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    autocoinageSnapshot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layer2Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migratedL2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
