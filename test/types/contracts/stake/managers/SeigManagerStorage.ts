/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SeigManagerStorageInterface extends utils.Interface {
  functions: {
    "MAX_VALID_COMMISSION()": FunctionFragment;
    "MIN_VALID_COMMISSION()": FunctionFragment;
    "RAY()": FunctionFragment;
    "accRelativeSeig()": FunctionFragment;
    "adjustCommissionDelay()": FunctionFragment;
    "dao()": FunctionFragment;
    "daoSeigRate()": FunctionFragment;
    "delayedCommissionBlock(address)": FunctionFragment;
    "delayedCommissionRate(address)": FunctionFragment;
    "delayedCommissionRateNegative(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "lastSnapshotId()": FunctionFragment;
    "minimumAmount()": FunctionFragment;
    "paused()": FunctionFragment;
    "powerTONSeigRate()": FunctionFragment;
    "relativeSeigRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_VALID_COMMISSION"
      | "MIN_VALID_COMMISSION"
      | "RAY"
      | "accRelativeSeig"
      | "adjustCommissionDelay"
      | "dao"
      | "daoSeigRate"
      | "delayedCommissionBlock"
      | "delayedCommissionRate"
      | "delayedCommissionRateNegative"
      | "factory"
      | "lastSnapshotId"
      | "minimumAmount"
      | "paused"
      | "powerTONSeigRate"
      | "relativeSeigRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_VALID_COMMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VALID_COMMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accRelativeSeig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustCommissionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoSeigRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionRateNegative",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerTONSeigRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relativeSeigRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_VALID_COMMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VALID_COMMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accRelativeSeig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustCommissionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionRateNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerTONSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relativeSeigRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SeigManagerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeigManagerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRelativeSeig(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    daoSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    lastSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    relativeSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  RAY(overrides?: CallOverrides): Promise<BigNumber>;

  accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

  adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  delayedCommissionBlock(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delayedCommissionRate(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delayedCommissionRateNegative(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  factory(overrides?: CallOverrides): Promise<string>;

  lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_VALID_COMMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_VALID_COMMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRelativeSeig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustCommissionDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relativeSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
