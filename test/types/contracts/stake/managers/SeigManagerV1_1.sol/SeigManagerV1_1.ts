/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface SeigManagerV1_1Interface extends utils.Interface {
  functions: {
    "BURNT_AMOUNT_MAINNET()": FunctionFragment;
    "CHALLENGER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_FACTOR()": FunctionFragment;
    "INITIAL_TOTAL_SUPPLY_MAINNET()": FunctionFragment;
    "MAX_VALID_COMMISSION()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "MIN_VALID_COMMISSION()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "PAUSE_ROLE()": FunctionFragment;
    "RAY()": FunctionFragment;
    "SEIG_START_MAINNET()": FunctionFragment;
    "accRelativeSeig()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addChallenger(address)": FunctionFragment;
    "addMinter(address)": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "additionalTotBurnAmount(address,address,uint256)": FunctionFragment;
    "adjustCommissionDelay()": FunctionFragment;
    "aliveImplementation(address)": FunctionFragment;
    "burntAmountAtDAO()": FunctionFragment;
    "coinages(address)": FunctionFragment;
    "commissionRates(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "daoSeigRate()": FunctionFragment;
    "delayedCommissionBlock(address)": FunctionFragment;
    "delayedCommissionRate(address)": FunctionFragment;
    "delayedCommissionRateNegative(address)": FunctionFragment;
    "deployCoinage(address)": FunctionFragment;
    "depositManager()": FunctionFragment;
    "factory()": FunctionFragment;
    "getOperatorAmount(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialTotalSupply()": FunctionFragment;
    "initialize(address,address,address,address,uint256,address,uint256)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isChallenger(address)": FunctionFragment;
    "isCommissionRateNegative(address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "lastCommitBlock(address)": FunctionFragment;
    "lastSeigBlock()": FunctionFragment;
    "lastSnapshotId()": FunctionFragment;
    "minimumAmount()": FunctionFragment;
    "onDeposit(address,address,uint256)": FunctionFragment;
    "onSnapshot()": FunctionFragment;
    "onTransfer(address,address,uint256)": FunctionFragment;
    "onWithdraw(address,address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseProxy()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausedBlock()": FunctionFragment;
    "powerTONSeigRate()": FunctionFragment;
    "powerton()": FunctionFragment;
    "progressSnapshotId()": FunctionFragment;
    "proxyImplementation(uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "relativeSeigRate()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeChallenger(address)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceChallenger()": FunctionFragment;
    "renounceMinter(address)": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "renounceOperator()": FunctionFragment;
    "renounceOwnership(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "renounceWTONMinter()": FunctionFragment;
    "revokeChallenger(address)": FunctionFragment;
    "revokeMinter(address)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "seigPerBlock()": FunctionFragment;
    "seigStartBlock()": FunctionFragment;
    "selectorImplementation(bytes4)": FunctionFragment;
    "setAdjustDelay(uint256)": FunctionFragment;
    "setBurntAmountAtDAO(uint256)": FunctionFragment;
    "setCoinageFactory(address)": FunctionFragment;
    "setCommissionRate(address,uint256,bool)": FunctionFragment;
    "setDao(address)": FunctionFragment;
    "setDaoSeigRate(uint256)": FunctionFragment;
    "setData(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setInitialTotalSupply(uint256)": FunctionFragment;
    "setMinimumAmount(uint256)": FunctionFragment;
    "setPowerTON(address)": FunctionFragment;
    "setPowerTONSeigRate(uint256)": FunctionFragment;
    "setPseigRate(uint256)": FunctionFragment;
    "setSeigStartBlock(uint256)": FunctionFragment;
    "slash(address,address)": FunctionFragment;
    "stakeOf(address)": FunctionFragment;
    "stakeOf(address,address)": FunctionFragment;
    "stakeOfAllLayers()": FunctionFragment;
    "stakeOfAllLayersAt(uint256)": FunctionFragment;
    "stakeOfAt(address,uint256)": FunctionFragment;
    "stakeOfAt(address,address,uint256)": FunctionFragment;
    "stakeOfTotal()": FunctionFragment;
    "stakeOfTotalAt(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ton()": FunctionFragment;
    "tot()": FunctionFragment;
    "totalSupplyOfTon()": FunctionFragment;
    "totalSupplyOfTon_2()": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "transferCoinageOwnership(address,address[])": FunctionFragment;
    "transferOwnership(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unallocatedSeigniorage()": FunctionFragment;
    "unallocatedSeigniorageAt(uint256)": FunctionFragment;
    "uncommittedStakeOf(address,address)": FunctionFragment;
    "uncommittedStakeOf(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unpausedBlock()": FunctionFragment;
    "updateSeigniorage()": FunctionFragment;
    "updateSeigniorageLayer(address)": FunctionFragment;
    "wton()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BURNT_AMOUNT_MAINNET"
      | "CHALLENGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_FACTOR"
      | "INITIAL_TOTAL_SUPPLY_MAINNET"
      | "MAX_VALID_COMMISSION"
      | "MINTER_ROLE"
      | "MIN_VALID_COMMISSION"
      | "OPERATOR_ROLE"
      | "PAUSE_ROLE"
      | "RAY"
      | "SEIG_START_MAINNET"
      | "accRelativeSeig"
      | "addAdmin"
      | "addChallenger"
      | "addMinter"
      | "addOperator"
      | "additionalTotBurnAmount"
      | "adjustCommissionDelay"
      | "aliveImplementation"
      | "burntAmountAtDAO"
      | "coinages"
      | "commissionRates"
      | "dao"
      | "daoSeigRate"
      | "delayedCommissionBlock"
      | "delayedCommissionRate"
      | "delayedCommissionRateNegative"
      | "deployCoinage"
      | "depositManager"
      | "factory"
      | "getOperatorAmount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialTotalSupply"
      | "initialize"
      | "isAdmin"
      | "isChallenger"
      | "isCommissionRateNegative"
      | "isMinter"
      | "isOperator"
      | "isOwner"
      | "lastCommitBlock"
      | "lastSeigBlock"
      | "lastSnapshotId"
      | "minimumAmount"
      | "onDeposit"
      | "onSnapshot"
      | "onTransfer"
      | "onWithdraw"
      | "pause"
      | "pauseProxy"
      | "paused"
      | "pausedBlock"
      | "powerTONSeigRate"
      | "powerton"
      | "progressSnapshotId"
      | "proxyImplementation"
      | "registry"
      | "relativeSeigRate"
      | "removeAdmin"
      | "removeChallenger"
      | "removeMinter"
      | "removeOperator"
      | "renounceChallenger"
      | "renounceMinter(address)"
      | "renounceMinter()"
      | "renounceOperator"
      | "renounceOwnership(address)"
      | "renounceOwnership()"
      | "renouncePauser"
      | "renounceRole"
      | "renounceWTONMinter"
      | "revokeChallenger"
      | "revokeMinter"
      | "revokeOperator"
      | "revokeRole"
      | "seigPerBlock"
      | "seigStartBlock"
      | "selectorImplementation"
      | "setAdjustDelay"
      | "setBurntAmountAtDAO"
      | "setCoinageFactory"
      | "setCommissionRate"
      | "setDao"
      | "setDaoSeigRate"
      | "setData"
      | "setInitialTotalSupply"
      | "setMinimumAmount"
      | "setPowerTON"
      | "setPowerTONSeigRate"
      | "setPseigRate"
      | "setSeigStartBlock"
      | "slash"
      | "stakeOf(address)"
      | "stakeOf(address,address)"
      | "stakeOfAllLayers"
      | "stakeOfAllLayersAt"
      | "stakeOfAt(address,uint256)"
      | "stakeOfAt(address,address,uint256)"
      | "stakeOfTotal"
      | "stakeOfTotalAt"
      | "supportsInterface"
      | "ton"
      | "tot"
      | "totalSupplyOfTon"
      | "totalSupplyOfTon_2"
      | "transferAdmin"
      | "transferCoinageOwnership"
      | "transferOwnership(address,address)"
      | "transferOwnership(address)"
      | "unallocatedSeigniorage"
      | "unallocatedSeigniorageAt"
      | "uncommittedStakeOf(address,address)"
      | "uncommittedStakeOf(address)"
      | "unpause"
      | "unpausedBlock"
      | "updateSeigniorage"
      | "updateSeigniorageLayer"
      | "wton"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BURNT_AMOUNT_MAINNET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHALLENGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_TOTAL_SUPPLY_MAINNET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VALID_COMMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VALID_COMMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEIG_START_MAINNET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accRelativeSeig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalTotBurnAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustCommissionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aliveImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burntAmountAtDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coinages",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoSeigRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedCommissionRateNegative",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCoinage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOperatorAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCommissionRateNegative",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastCommitBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSeigBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "powerTONSeigRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "powerton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "progressSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyImplementation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relativeSeigRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceChallenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWTONMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeChallenger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seigPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seigStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorImplementation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurntAmountAtDAO",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoinageFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDao",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoSeigRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialTotalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPowerTON",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPowerTONSeigRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPseigRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeigStartBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfAllLayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfAllLayersAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfAt(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfAt(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfTotalAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ton", values?: undefined): string;
  encodeFunctionData(functionFragment: "tot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOfTon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOfTon_2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCoinageOwnership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unallocatedSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unallocatedSeigniorageAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uncommittedStakeOf(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uncommittedStakeOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpausedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeigniorageLayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wton", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BURNT_AMOUNT_MAINNET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHALLENGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_TOTAL_SUPPLY_MAINNET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VALID_COMMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VALID_COMMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PAUSE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEIG_START_MAINNET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRelativeSeig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalTotBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustCommissionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aliveImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burntAmountAtDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coinages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commissionRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedCommissionRateNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCoinage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCommissionRateNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastCommitBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSeigBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSnapshot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onWithdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "powerTONSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "powerton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "progressSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relativeSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWTONMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurntAmountAtDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoinageFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDaoSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitialTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPowerTON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPowerTONSeigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPseigRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeigStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfAllLayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfAllLayersAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfAt(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfTotalAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOfTon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOfTon_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCoinageOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unallocatedSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unallocatedSeigniorageAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uncommittedStakeOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uncommittedStakeOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpausedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeigniorageLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wton", data: BytesLike): Result;

  events: {
    "AddedSeigAtLayer(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CoinageCreated(address,address)": EventFragment;
    "Comitted(address)": EventFragment;
    "CommissionRateSet(address,uint256,uint256)": EventFragment;
    "CommitLog1(uint256,uint256,uint256,uint256)": EventFragment;
    "OnSnapshot(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SeigGiven(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SetBurntAmountAtDAO(uint256)": EventFragment;
    "SetDaoSeigRate(uint256)": EventFragment;
    "SetInitialTotalSupply(uint256)": EventFragment;
    "SetPowerTONSeigRate(uint256)": EventFragment;
    "SetPseigRate(uint256)": EventFragment;
    "SetSeigStartBlock(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnstakeLog(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSeigAtLayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoinageCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Comitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitLog1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSnapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeigGiven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBurntAmountAtDAO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoSeigRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInitialTotalSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPowerTONSeigRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPseigRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSeigStartBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeLog"): EventFragment;
}

export interface AddedSeigAtLayerEventObject {
  layer2: string;
  seigs: BigNumber;
  operatorSeigs: BigNumber;
  nextTotalSupply: BigNumber;
  prevTotalSupply: BigNumber;
}
export type AddedSeigAtLayerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  AddedSeigAtLayerEventObject
>;

export type AddedSeigAtLayerEventFilter =
  TypedEventFilter<AddedSeigAtLayerEvent>;

export interface CoinageCreatedEventObject {
  layer2: string;
  coinage: string;
}
export type CoinageCreatedEvent = TypedEvent<
  [string, string],
  CoinageCreatedEventObject
>;

export type CoinageCreatedEventFilter = TypedEventFilter<CoinageCreatedEvent>;

export interface ComittedEventObject {
  layer2: string;
}
export type ComittedEvent = TypedEvent<[string], ComittedEventObject>;

export type ComittedEventFilter = TypedEventFilter<ComittedEvent>;

export interface CommissionRateSetEventObject {
  layer2: string;
  previousRate: BigNumber;
  newRate: BigNumber;
}
export type CommissionRateSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CommissionRateSetEventObject
>;

export type CommissionRateSetEventFilter =
  TypedEventFilter<CommissionRateSetEvent>;

export interface CommitLog1EventObject {
  totalStakedAmount: BigNumber;
  totalSupplyOfWTON: BigNumber;
  prevTotalSupply: BigNumber;
  nextTotalSupply: BigNumber;
}
export type CommitLog1Event = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  CommitLog1EventObject
>;

export type CommitLog1EventFilter = TypedEventFilter<CommitLog1Event>;

export interface OnSnapshotEventObject {
  snapshotId: BigNumber;
}
export type OnSnapshotEvent = TypedEvent<[BigNumber], OnSnapshotEventObject>;

export type OnSnapshotEventFilter = TypedEventFilter<OnSnapshotEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SeigGivenEventObject {
  layer2: string;
  totalSeig: BigNumber;
  stakedSeig: BigNumber;
  unstakedSeig: BigNumber;
  powertonSeig: BigNumber;
  daoSeig: BigNumber;
  pseig: BigNumber;
}
export type SeigGivenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SeigGivenEventObject
>;

export type SeigGivenEventFilter = TypedEventFilter<SeigGivenEvent>;

export interface SetBurntAmountAtDAOEventObject {
  _burntAmountAtDAO: BigNumber;
}
export type SetBurntAmountAtDAOEvent = TypedEvent<
  [BigNumber],
  SetBurntAmountAtDAOEventObject
>;

export type SetBurntAmountAtDAOEventFilter =
  TypedEventFilter<SetBurntAmountAtDAOEvent>;

export interface SetDaoSeigRateEventObject {
  daoSeigRate: BigNumber;
}
export type SetDaoSeigRateEvent = TypedEvent<
  [BigNumber],
  SetDaoSeigRateEventObject
>;

export type SetDaoSeigRateEventFilter = TypedEventFilter<SetDaoSeigRateEvent>;

export interface SetInitialTotalSupplyEventObject {
  _initialTotalSupply: BigNumber;
}
export type SetInitialTotalSupplyEvent = TypedEvent<
  [BigNumber],
  SetInitialTotalSupplyEventObject
>;

export type SetInitialTotalSupplyEventFilter =
  TypedEventFilter<SetInitialTotalSupplyEvent>;

export interface SetPowerTONSeigRateEventObject {
  powerTONSeigRate: BigNumber;
}
export type SetPowerTONSeigRateEvent = TypedEvent<
  [BigNumber],
  SetPowerTONSeigRateEventObject
>;

export type SetPowerTONSeigRateEventFilter =
  TypedEventFilter<SetPowerTONSeigRateEvent>;

export interface SetPseigRateEventObject {
  pseigRate: BigNumber;
}
export type SetPseigRateEvent = TypedEvent<
  [BigNumber],
  SetPseigRateEventObject
>;

export type SetPseigRateEventFilter = TypedEventFilter<SetPseigRateEvent>;

export interface SetSeigStartBlockEventObject {
  _seigStartBlock: BigNumber;
}
export type SetSeigStartBlockEvent = TypedEvent<
  [BigNumber],
  SetSeigStartBlockEventObject
>;

export type SetSeigStartBlockEventFilter =
  TypedEventFilter<SetSeigStartBlockEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeLogEventObject {
  coinageBurnAmount: BigNumber;
  totBurnAmount: BigNumber;
}
export type UnstakeLogEvent = TypedEvent<
  [BigNumber, BigNumber],
  UnstakeLogEventObject
>;

export type UnstakeLogEventFilter = TypedEventFilter<UnstakeLogEvent>;

export interface SeigManagerV1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeigManagerV1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURNT_AMOUNT_MAINNET(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHALLENGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_TOTAL_SUPPLY_MAINNET(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEIG_START_MAINNET(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRelativeSeig(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totAmount: BigNumber }>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    burntAmountAtDAO(overrides?: CallOverrides): Promise<[BigNumber]>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    daoSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositManager(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getOperatorAmount(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      ton_: PromiseOrValue<string>,
      wton_: PromiseOrValue<string>,
      registry_: PromiseOrValue<string>,
      depositManager_: PromiseOrValue<string>,
      seigPerBlock_: PromiseOrValue<BigNumberish>,
      factory_: PromiseOrValue<string>,
      lastSeigBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCommissionRateNegative(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSeigBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    powerton(overrides?: CallOverrides): Promise<[string]>;

    progressSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    relativeSeigRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceMinter(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceWTONMinter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    seigStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setAdjustDelay(
      adjustDelay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBurntAmountAtDAO(
      _burntAmountAtDAO: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCoinageFactory(
      factory_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDao(
      daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDaoSeigRate(
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setData(
      powerton_: PromiseOrValue<string>,
      daoAddress: PromiseOrValue<string>,
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      relativeSeigRate_: PromiseOrValue<BigNumberish>,
      adjustDelay_: PromiseOrValue<BigNumberish>,
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialTotalSupply(
      _initialTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumAmount(
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPowerTON(
      powerton_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPowerTONSeigRate(
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPseigRate(
      pseigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeigStartBlock(
      _seigStartBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slash(
      layer2: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "stakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeOfAllLayers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    stakeOfAllLayersAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakeOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "stakeOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    stakeOfTotal(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    stakeOfTotalAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ton(overrides?: CallOverrides): Promise<[string]>;

    tot(overrides?: CallOverrides): Promise<[string]>;

    totalSupplyOfTon(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tos: BigNumber }>;

    totalSupplyOfTon_2(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tos: BigNumber }>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferCoinageOwnership(
      newSeigManager: PromiseOrValue<string>,
      coinages_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,address)"(
      target: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unallocatedSeigniorage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    unallocatedSeigniorageAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "uncommittedStakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "uncommittedStakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpausedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSeigniorageLayer(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wton(overrides?: CallOverrides): Promise<[string]>;
  };

  BURNT_AMOUNT_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

  CHALLENGER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_TOTAL_SUPPLY_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

  RAY(overrides?: CallOverrides): Promise<BigNumber>;

  SEIG_START_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

  accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

  addAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addChallenger(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMinter(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOperator(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  additionalTotBurnAmount(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  aliveImplementation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  burntAmountAtDAO(overrides?: CallOverrides): Promise<BigNumber>;

  coinages(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  commissionRates(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  delayedCommissionBlock(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delayedCommissionRate(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delayedCommissionRateNegative(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployCoinage(
    layer2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getOperatorAmount(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    ton_: PromiseOrValue<string>,
    wton_: PromiseOrValue<string>,
    registry_: PromiseOrValue<string>,
    depositManager_: PromiseOrValue<string>,
    seigPerBlock_: PromiseOrValue<BigNumberish>,
    factory_: PromiseOrValue<string>,
    lastSeigBlock_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isChallenger(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCommissionRateNegative(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperator(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  lastCommitBlock(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

  onDeposit(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onSnapshot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onTransfer(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onWithdraw(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseProxy(overrides?: CallOverrides): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  powerton(overrides?: CallOverrides): Promise<string>;

  progressSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  proxyImplementation(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

  removeAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeChallenger(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMinter(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOperator(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceChallenger(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceMinter(address)"(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceMinter()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOperator(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership(address)"(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceWTONMinter(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeChallenger(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeMinter(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  seigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  selectorImplementation(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setAdjustDelay(
    adjustDelay_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBurntAmountAtDAO(
    _burntAmountAtDAO: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCoinageFactory(
    factory_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommissionRate(
    layer2: PromiseOrValue<string>,
    commissionRate: PromiseOrValue<BigNumberish>,
    isCommissionRateNegative_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDao(
    daoAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDaoSeigRate(
    daoSeigRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setData(
    powerton_: PromiseOrValue<string>,
    daoAddress: PromiseOrValue<string>,
    powerTONSeigRate_: PromiseOrValue<BigNumberish>,
    daoSeigRate_: PromiseOrValue<BigNumberish>,
    relativeSeigRate_: PromiseOrValue<BigNumberish>,
    adjustDelay_: PromiseOrValue<BigNumberish>,
    minimumAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialTotalSupply(
    _initialTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumAmount(
    minimumAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPowerTON(
    powerton_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPowerTONSeigRate(
    powerTONSeigRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPseigRate(
    pseigRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeigStartBlock(
    _seigStartBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slash(
    layer2: PromiseOrValue<string>,
    challenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "stakeOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakeOf(address,address)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeOfAllLayers(overrides?: CallOverrides): Promise<BigNumber>;

  stakeOfAllLayersAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakeOfAt(address,uint256)"(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakeOfAt(address,address,uint256)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeOfTotal(overrides?: CallOverrides): Promise<BigNumber>;

  stakeOfTotalAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ton(overrides?: CallOverrides): Promise<string>;

  tot(overrides?: CallOverrides): Promise<string>;

  totalSupplyOfTon(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyOfTon_2(overrides?: CallOverrides): Promise<BigNumber>;

  transferAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferCoinageOwnership(
    newSeigManager: PromiseOrValue<string>,
    coinages_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,address)"(
    target: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unallocatedSeigniorage(overrides?: CallOverrides): Promise<BigNumber>;

  unallocatedSeigniorageAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "uncommittedStakeOf(address,address)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "uncommittedStakeOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  updateSeigniorage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSeigniorageLayer(
    layer2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wton(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BURNT_AMOUNT_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_TOTAL_SUPPLY_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    SEIG_START_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burntAmountAtDAO(overrides?: CallOverrides): Promise<BigNumber>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getOperatorAmount(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ton_: PromiseOrValue<string>,
      wton_: PromiseOrValue<string>,
      registry_: PromiseOrValue<string>,
      depositManager_: PromiseOrValue<string>,
      seigPerBlock_: PromiseOrValue<BigNumberish>,
      factory_: PromiseOrValue<string>,
      lastSeigBlock_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCommissionRateNegative(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onSnapshot(overrides?: CallOverrides): Promise<BigNumber>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseProxy(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    powerton(overrides?: CallOverrides): Promise<string>;

    progressSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceChallenger(overrides?: CallOverrides): Promise<void>;

    "renounceMinter(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceMinter()"(overrides?: CallOverrides): Promise<void>;

    renounceOperator(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership(address)"(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renouncePauser(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceWTONMinter(overrides?: CallOverrides): Promise<void>;

    revokeChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    seigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAdjustDelay(
      adjustDelay_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurntAmountAtDAO(
      _burntAmountAtDAO: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoinageFactory(
      factory_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDao(
      daoAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoSeigRate(
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setData(
      powerton_: PromiseOrValue<string>,
      daoAddress: PromiseOrValue<string>,
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      relativeSeigRate_: PromiseOrValue<BigNumberish>,
      adjustDelay_: PromiseOrValue<BigNumberish>,
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialTotalSupply(
      _initialTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumAmount(
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPowerTON(
      powerton_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPowerTONSeigRate(
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPseigRate(
      pseigRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeigStartBlock(
      _seigStartBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      layer2: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfAllLayers(overrides?: CallOverrides): Promise<BigNumber>;

    stakeOfAllLayersAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stakeOfTotalAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ton(overrides?: CallOverrides): Promise<string>;

    tot(overrides?: CallOverrides): Promise<string>;

    totalSupplyOfTon(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOfTon_2(overrides?: CallOverrides): Promise<BigNumber>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCoinageOwnership(
      newSeigManager: PromiseOrValue<string>,
      coinages_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,address)"(
      target: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unallocatedSeigniorage(overrides?: CallOverrides): Promise<BigNumber>;

    unallocatedSeigniorageAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uncommittedStakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uncommittedStakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    updateSeigniorage(overrides?: CallOverrides): Promise<boolean>;

    updateSeigniorageLayer(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wton(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedSeigAtLayer(address,uint256,uint256,uint256,uint256)"(
      layer2?: null,
      seigs?: null,
      operatorSeigs?: null,
      nextTotalSupply?: null,
      prevTotalSupply?: null
    ): AddedSeigAtLayerEventFilter;
    AddedSeigAtLayer(
      layer2?: null,
      seigs?: null,
      operatorSeigs?: null,
      nextTotalSupply?: null,
      prevTotalSupply?: null
    ): AddedSeigAtLayerEventFilter;

    "CoinageCreated(address,address)"(
      layer2?: PromiseOrValue<string> | null,
      coinage?: null
    ): CoinageCreatedEventFilter;
    CoinageCreated(
      layer2?: PromiseOrValue<string> | null,
      coinage?: null
    ): CoinageCreatedEventFilter;

    "Comitted(address)"(
      layer2?: PromiseOrValue<string> | null
    ): ComittedEventFilter;
    Comitted(layer2?: PromiseOrValue<string> | null): ComittedEventFilter;

    "CommissionRateSet(address,uint256,uint256)"(
      layer2?: PromiseOrValue<string> | null,
      previousRate?: null,
      newRate?: null
    ): CommissionRateSetEventFilter;
    CommissionRateSet(
      layer2?: PromiseOrValue<string> | null,
      previousRate?: null,
      newRate?: null
    ): CommissionRateSetEventFilter;

    "CommitLog1(uint256,uint256,uint256,uint256)"(
      totalStakedAmount?: null,
      totalSupplyOfWTON?: null,
      prevTotalSupply?: null,
      nextTotalSupply?: null
    ): CommitLog1EventFilter;
    CommitLog1(
      totalStakedAmount?: null,
      totalSupplyOfWTON?: null,
      prevTotalSupply?: null,
      nextTotalSupply?: null
    ): CommitLog1EventFilter;

    "OnSnapshot(uint256)"(snapshotId?: null): OnSnapshotEventFilter;
    OnSnapshot(snapshotId?: null): OnSnapshotEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SeigGiven(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      layer2?: PromiseOrValue<string> | null,
      totalSeig?: null,
      stakedSeig?: null,
      unstakedSeig?: null,
      powertonSeig?: null,
      daoSeig?: null,
      pseig?: null
    ): SeigGivenEventFilter;
    SeigGiven(
      layer2?: PromiseOrValue<string> | null,
      totalSeig?: null,
      stakedSeig?: null,
      unstakedSeig?: null,
      powertonSeig?: null,
      daoSeig?: null,
      pseig?: null
    ): SeigGivenEventFilter;

    "SetBurntAmountAtDAO(uint256)"(
      _burntAmountAtDAO?: null
    ): SetBurntAmountAtDAOEventFilter;
    SetBurntAmountAtDAO(
      _burntAmountAtDAO?: null
    ): SetBurntAmountAtDAOEventFilter;

    "SetDaoSeigRate(uint256)"(daoSeigRate?: null): SetDaoSeigRateEventFilter;
    SetDaoSeigRate(daoSeigRate?: null): SetDaoSeigRateEventFilter;

    "SetInitialTotalSupply(uint256)"(
      _initialTotalSupply?: null
    ): SetInitialTotalSupplyEventFilter;
    SetInitialTotalSupply(
      _initialTotalSupply?: null
    ): SetInitialTotalSupplyEventFilter;

    "SetPowerTONSeigRate(uint256)"(
      powerTONSeigRate?: null
    ): SetPowerTONSeigRateEventFilter;
    SetPowerTONSeigRate(
      powerTONSeigRate?: null
    ): SetPowerTONSeigRateEventFilter;

    "SetPseigRate(uint256)"(pseigRate?: null): SetPseigRateEventFilter;
    SetPseigRate(pseigRate?: null): SetPseigRateEventFilter;

    "SetSeigStartBlock(uint256)"(
      _seigStartBlock?: null
    ): SetSeigStartBlockEventFilter;
    SetSeigStartBlock(_seigStartBlock?: null): SetSeigStartBlockEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UnstakeLog(uint256,uint256)"(
      coinageBurnAmount?: null,
      totBurnAmount?: null
    ): UnstakeLogEventFilter;
    UnstakeLog(
      coinageBurnAmount?: null,
      totBurnAmount?: null
    ): UnstakeLogEventFilter;
  };

  estimateGas: {
    BURNT_AMOUNT_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_TOTAL_SUPPLY_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VALID_COMMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    SEIG_START_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;

    accRelativeSeig(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adjustCommissionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burntAmountAtDAO(overrides?: CallOverrides): Promise<BigNumber>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    daoSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorAmount(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ton_: PromiseOrValue<string>,
      wton_: PromiseOrValue<string>,
      registry_: PromiseOrValue<string>,
      depositManager_: PromiseOrValue<string>,
      seigPerBlock_: PromiseOrValue<BigNumberish>,
      factory_: PromiseOrValue<string>,
      lastSeigBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCommissionRateNegative(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseProxy(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    powerton(overrides?: CallOverrides): Promise<BigNumber>;

    progressSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    relativeSeigRate(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceMinter(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceWTONMinter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    seigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdjustDelay(
      adjustDelay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBurntAmountAtDAO(
      _burntAmountAtDAO: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCoinageFactory(
      factory_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDao(
      daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDaoSeigRate(
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setData(
      powerton_: PromiseOrValue<string>,
      daoAddress: PromiseOrValue<string>,
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      relativeSeigRate_: PromiseOrValue<BigNumberish>,
      adjustDelay_: PromiseOrValue<BigNumberish>,
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialTotalSupply(
      _initialTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumAmount(
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPowerTON(
      powerton_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPowerTONSeigRate(
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPseigRate(
      pseigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeigStartBlock(
      _seigStartBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slash(
      layer2: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "stakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfAllLayers(overrides?: CallOverrides): Promise<BigNumber>;

    stakeOfAllLayersAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeOfTotal(overrides?: CallOverrides): Promise<BigNumber>;

    stakeOfTotalAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ton(overrides?: CallOverrides): Promise<BigNumber>;

    tot(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOfTon(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOfTon_2(overrides?: CallOverrides): Promise<BigNumber>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferCoinageOwnership(
      newSeigManager: PromiseOrValue<string>,
      coinages_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,address)"(
      target: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unallocatedSeigniorage(overrides?: CallOverrides): Promise<BigNumber>;

    unallocatedSeigniorageAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uncommittedStakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uncommittedStakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpausedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSeigniorageLayer(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wton(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BURNT_AMOUNT_MAINNET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHALLENGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INITIAL_TOTAL_SUPPLY_MAINNET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_VALID_COMMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VALID_COMMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEIG_START_MAINNET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accRelativeSeig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    additionalTotBurnAmount(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adjustCommissionDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aliveImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burntAmountAtDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinages(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionRates(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedCommissionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedCommissionRate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedCommissionRateNegative(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployCoinage(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperatorAmount(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      ton_: PromiseOrValue<string>,
      wton_: PromiseOrValue<string>,
      registry_: PromiseOrValue<string>,
      depositManager_: PromiseOrValue<string>,
      seigPerBlock_: PromiseOrValue<BigNumberish>,
      factory_: PromiseOrValue<string>,
      lastSeigBlock_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChallenger(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCommissionRateNegative(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCommitBlock(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSeigBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onDeposit(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onTransfer(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onWithdraw(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTONSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    progressSnapshotId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyImplementation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relativeSeigRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceChallenger(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceMinter(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOperator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership(address)"(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceWTONMinter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeChallenger(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeMinter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seigStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selectorImplementation(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustDelay(
      adjustDelay_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBurntAmountAtDAO(
      _burntAmountAtDAO: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCoinageFactory(
      factory_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommissionRate(
      layer2: PromiseOrValue<string>,
      commissionRate: PromiseOrValue<BigNumberish>,
      isCommissionRateNegative_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDao(
      daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDaoSeigRate(
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      powerton_: PromiseOrValue<string>,
      daoAddress: PromiseOrValue<string>,
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      daoSeigRate_: PromiseOrValue<BigNumberish>,
      relativeSeigRate_: PromiseOrValue<BigNumberish>,
      adjustDelay_: PromiseOrValue<BigNumberish>,
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialTotalSupply(
      _initialTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumAmount(
      minimumAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPowerTON(
      powerton_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPowerTONSeigRate(
      powerTONSeigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPseigRate(
      pseigRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeigStartBlock(
      _seigStartBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slash(
      layer2: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "stakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeOfAllLayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeOfAllLayersAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeOfTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeOfTotalAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyOfTon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyOfTon_2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferCoinageOwnership(
      newSeigManager: PromiseOrValue<string>,
      coinages_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,address)"(
      target: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unallocatedSeigniorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unallocatedSeigniorageAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uncommittedStakeOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uncommittedStakeOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpausedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSeigniorageLayer(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wton(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
