/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RefactorCoinageSnapshotStorageInterface
  extends utils.Interface {
  functions: {
    "REFACTOR_BOUNDARY()": FunctionFragment;
    "REFACTOR_DIVIDER()": FunctionFragment;
    "_allowances(address,address)": FunctionFragment;
    "accountBalanceIds(address,uint256)": FunctionFragment;
    "accountBalanceSnapshots(address,uint256)": FunctionFragment;
    "factorSnapshotIds(uint256)": FunctionFragment;
    "factorSnapshots(uint256)": FunctionFragment;
    "lastSnapshotId()": FunctionFragment;
    "name()": FunctionFragment;
    "seigManager()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupplySnapshotIds(uint256)": FunctionFragment;
    "totalSupplySnapshots(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REFACTOR_BOUNDARY"
      | "REFACTOR_DIVIDER"
      | "_allowances"
      | "accountBalanceIds"
      | "accountBalanceSnapshots"
      | "factorSnapshotIds"
      | "factorSnapshots"
      | "lastSnapshotId"
      | "name"
      | "seigManager"
      | "symbol"
      | "totalSupplySnapshotIds"
      | "totalSupplySnapshots"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REFACTOR_BOUNDARY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFACTOR_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_allowances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountBalanceIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountBalanceSnapshots",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "factorSnapshotIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "factorSnapshots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seigManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupplySnapshotIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplySnapshots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "REFACTOR_BOUNDARY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFACTOR_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_allowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountBalanceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountBalanceSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factorSnapshotIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factorSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplySnapshotIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplySnapshots",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RefactorCoinageSnapshotStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RefactorCoinageSnapshotStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REFACTOR_BOUNDARY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REFACTOR_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    _allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accountBalanceIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accountBalanceSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        refactoredCount: BigNumber;
      }
    >;

    factorSnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factorSnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { factor: BigNumber; refactorCount: BigNumber }
    >;

    lastSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    seigManager(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupplySnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplySnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        refactoredCount: BigNumber;
      }
    >;
  };

  REFACTOR_BOUNDARY(overrides?: CallOverrides): Promise<BigNumber>;

  REFACTOR_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  _allowances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accountBalanceIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accountBalanceSnapshots(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; refactoredCount: BigNumber }
  >;

  factorSnapshotIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factorSnapshots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { factor: BigNumber; refactorCount: BigNumber }
  >;

  lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  seigManager(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupplySnapshotIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplySnapshots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; refactoredCount: BigNumber }
  >;

  callStatic: {
    REFACTOR_BOUNDARY(overrides?: CallOverrides): Promise<BigNumber>;

    REFACTOR_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    _allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBalanceIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBalanceSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        refactoredCount: BigNumber;
      }
    >;

    factorSnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorSnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { factor: BigNumber; refactorCount: BigNumber }
    >;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    seigManager(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupplySnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplySnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        refactoredCount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    REFACTOR_BOUNDARY(overrides?: CallOverrides): Promise<BigNumber>;

    REFACTOR_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    _allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBalanceIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountBalanceSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorSnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorSnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    seigManager(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplySnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplySnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REFACTOR_BOUNDARY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REFACTOR_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountBalanceIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountBalanceSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factorSnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factorSnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplySnapshotIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplySnapshots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
