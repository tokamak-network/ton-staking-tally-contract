/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IAutoCoinageSnapshotInterface extends utils.Interface {
  functions: {
    "addSync(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "balanceOfAt(address,address,uint256)": FunctionFragment;
    "currentAccountBalanceSnapshots(address,address)": FunctionFragment;
    "currentFactorSnapshots(address)": FunctionFragment;
    "currentTotalSupplySnapshots(address)": FunctionFragment;
    "getBalanceOfInTokamak(address)": FunctionFragment;
    "getCurrentLayer2SnapshotId(address)": FunctionFragment;
    "getLayer2BalanceOfInTokamak(address,address)": FunctionFragment;
    "getLayer2TotalSupplyInTokamak(address)": FunctionFragment;
    "getTotalStakedInTokamak()": FunctionFragment;
    "snapshot(address)": FunctionFragment;
    "snapshot()": FunctionFragment;
    "sync(address,address)": FunctionFragment;
    "sync(address)": FunctionFragment;
    "syncBatch(address,address[])": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupply(address)": FunctionFragment;
    "totalSupplyAt(address,uint256)": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSync"
      | "balanceOf(address)"
      | "balanceOf(address,address)"
      | "balanceOfAt(address,uint256)"
      | "balanceOfAt(address,address,uint256)"
      | "currentAccountBalanceSnapshots"
      | "currentFactorSnapshots"
      | "currentTotalSupplySnapshots"
      | "getBalanceOfInTokamak"
      | "getCurrentLayer2SnapshotId"
      | "getLayer2BalanceOfInTokamak"
      | "getLayer2TotalSupplyInTokamak"
      | "getTotalStakedInTokamak"
      | "snapshot(address)"
      | "snapshot()"
      | "sync(address,address)"
      | "sync(address)"
      | "syncBatch"
      | "totalSupply()"
      | "totalSupply(address)"
      | "totalSupplyAt(address,uint256)"
      | "totalSupplyAt(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSync",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentAccountBalanceSnapshots",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFactorSnapshots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTotalSupplySnapshots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceOfInTokamak",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLayer2SnapshotId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLayer2BalanceOfInTokamak",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLayer2TotalSupplyInTokamak",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedInTokamak",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "snapshot(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshot()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sync(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sync(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addSync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAccountBalanceSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFactorSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTotalSupplySnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceOfInTokamak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLayer2SnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLayer2BalanceOfInTokamak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLayer2TotalSupplyInTokamak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedInTokamak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapshot(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sync(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sync(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAutoCoinageSnapshot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAutoCoinageSnapshotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSync(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentAccountBalanceSnapshots(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        snapshotted: boolean;
        snapShotBalance: BigNumber;
        snapShotRefactoredCount: BigNumber;
        snapShotRemain: BigNumber;
        currentBalanceOf: BigNumber;
        curBalances: BigNumber;
        curRefactoredCounts: BigNumber;
        curRemains: BigNumber;
      }
    >;

    currentFactorSnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        snapshotted: boolean;
        snapShotFactor: BigNumber;
        snapShotRefactorCount: BigNumber;
        curFactorValue: BigNumber;
        curFactor: BigNumber;
        curRefactorCount: BigNumber;
      }
    >;

    currentTotalSupplySnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        snapshotted: boolean;
        snapShotBalance: BigNumber;
        snapShotRefactoredCount: BigNumber;
        snapShotRemain: BigNumber;
        currentTotalSupply: BigNumber;
        curBalances: BigNumber;
        curRefactoredCounts: BigNumber;
        curRemains: BigNumber;
      }
    >;

    getBalanceOfInTokamak(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountAmount: BigNumber }>;

    getCurrentLayer2SnapshotId(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLayer2BalanceOfInTokamak(
      layer2: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceOfLayer2Amount: BigNumber;
        balance: BigNumber;
        refactoredCount: BigNumber;
        remain: BigNumber;
      }
    >;

    getLayer2TotalSupplyInTokamak(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalSupplyLayer2: BigNumber;
        balance: BigNumber;
        refactoredCount: BigNumber;
        remain: BigNumber;
      }
    >;

    getTotalStakedInTokamak(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountAmount: BigNumber }>;

    "snapshot(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "snapshot()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sync(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sync(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncBatch(
      layer2: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(address,uint256)"(
      layer2: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStaked: BigNumber }>;
  };

  addSync(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    account: PromiseOrValue<string>,
    snashotAggregatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,address,uint256)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentAccountBalanceSnapshots(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      snapshotted: boolean;
      snapShotBalance: BigNumber;
      snapShotRefactoredCount: BigNumber;
      snapShotRemain: BigNumber;
      currentBalanceOf: BigNumber;
      curBalances: BigNumber;
      curRefactoredCounts: BigNumber;
      curRemains: BigNumber;
    }
  >;

  currentFactorSnapshots(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      snapshotted: boolean;
      snapShotFactor: BigNumber;
      snapShotRefactorCount: BigNumber;
      curFactorValue: BigNumber;
      curFactor: BigNumber;
      curRefactorCount: BigNumber;
    }
  >;

  currentTotalSupplySnapshots(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      snapshotted: boolean;
      snapShotBalance: BigNumber;
      snapShotRefactoredCount: BigNumber;
      snapShotRemain: BigNumber;
      currentTotalSupply: BigNumber;
      curBalances: BigNumber;
      curRefactoredCounts: BigNumber;
      curRemains: BigNumber;
    }
  >;

  getBalanceOfInTokamak(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentLayer2SnapshotId(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLayer2BalanceOfInTokamak(
    layer2: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      balanceOfLayer2Amount: BigNumber;
      balance: BigNumber;
      refactoredCount: BigNumber;
      remain: BigNumber;
    }
  >;

  getLayer2TotalSupplyInTokamak(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalSupplyLayer2: BigNumber;
      balance: BigNumber;
      refactoredCount: BigNumber;
      remain: BigNumber;
    }
  >;

  getTotalStakedInTokamak(overrides?: CallOverrides): Promise<BigNumber>;

  "snapshot(address)"(
    layer2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "snapshot()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sync(address,address)"(
    layer2: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sync(address)"(
    layer2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncBatch(
    layer2: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(address)"(
    layer2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(address,uint256)"(
    layer2: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    snashotAggregatorId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addSync(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentAccountBalanceSnapshots(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        snapshotted: boolean;
        snapShotBalance: BigNumber;
        snapShotRefactoredCount: BigNumber;
        snapShotRemain: BigNumber;
        currentBalanceOf: BigNumber;
        curBalances: BigNumber;
        curRefactoredCounts: BigNumber;
        curRemains: BigNumber;
      }
    >;

    currentFactorSnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        snapshotted: boolean;
        snapShotFactor: BigNumber;
        snapShotRefactorCount: BigNumber;
        curFactorValue: BigNumber;
        curFactor: BigNumber;
        curRefactorCount: BigNumber;
      }
    >;

    currentTotalSupplySnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        snapshotted: boolean;
        snapShotBalance: BigNumber;
        snapShotRefactoredCount: BigNumber;
        snapShotRemain: BigNumber;
        currentTotalSupply: BigNumber;
        curBalances: BigNumber;
        curRefactoredCounts: BigNumber;
        curRemains: BigNumber;
      }
    >;

    getBalanceOfInTokamak(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLayer2SnapshotId(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLayer2BalanceOfInTokamak(
      layer2: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balanceOfLayer2Amount: BigNumber;
        balance: BigNumber;
        refactoredCount: BigNumber;
        remain: BigNumber;
      }
    >;

    getLayer2TotalSupplyInTokamak(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalSupplyLayer2: BigNumber;
        balance: BigNumber;
        refactoredCount: BigNumber;
        remain: BigNumber;
      }
    >;

    getTotalStakedInTokamak(overrides?: CallOverrides): Promise<BigNumber>;

    "snapshot(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "snapshot()"(overrides?: CallOverrides): Promise<BigNumber>;

    "sync(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sync(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncBatch(
      layer2: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(address,uint256)"(
      layer2: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addSync(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentAccountBalanceSnapshots(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentFactorSnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentTotalSupplySnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceOfInTokamak(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLayer2SnapshotId(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLayer2BalanceOfInTokamak(
      layer2: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLayer2TotalSupplyInTokamak(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStakedInTokamak(overrides?: CallOverrides): Promise<BigNumber>;

    "snapshot(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "snapshot()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sync(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sync(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncBatch(
      layer2: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(address,uint256)"(
      layer2: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSync(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      account: PromiseOrValue<string>,
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,address,uint256)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentAccountBalanceSnapshots(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentFactorSnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentTotalSupplySnapshots(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceOfInTokamak(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLayer2SnapshotId(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLayer2BalanceOfInTokamak(
      layer2: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLayer2TotalSupplyInTokamak(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStakedInTokamak(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "snapshot(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "snapshot()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sync(address,address)"(
      layer2: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sync(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncBatch(
      layer2: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply(address)"(
      layer2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(address,uint256)"(
      layer2: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      snashotAggregatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
